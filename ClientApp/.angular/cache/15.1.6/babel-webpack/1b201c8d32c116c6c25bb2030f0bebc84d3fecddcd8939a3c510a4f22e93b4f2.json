{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modals = [];\n  }\n  add(modal) {\n    // ensure component has a unique id attribute\n    if (!modal.id || this.modals.find(x => x.id === modal.id)) {\n      throw new Error('modal must have a unique id attribute');\n    }\n    // add modal to array of active modals\n    this.modals.push(modal);\n  }\n  remove(modal) {\n    // remove modal from array of active modals\n    this.modals = this.modals.filter(x => x === modal);\n  }\n  open(id) {\n    // open modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n    if (!modal) {\n      throw new Error(`modal '${id}' not found`);\n    }\n    modal.open();\n    console.log(this.modals);\n  }\n  close() {\n    // close the modal that is currently open\n    const modal = this.modals.find(x => x.isOpen);\n    modal?.close();\n  }\n}\nModalService.ɵfac = function ModalService_Factory(t) {\n  return new (t || ModalService)();\n};\nModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ModalService,\n  factory: ModalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,YAAY;EADzBC;IAEY,WAAM,GAAqB,EAAE;;EAErCC,GAAG,CAACC,KAAqB;IACrB;IACA,IAAI,CAACA,KAAK,CAACC,EAAE,IAAI,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKD,KAAK,CAACC,EAAE,CAAC,EAAE;MACvD,MAAM,IAAII,KAAK,CAAC,uCAAuC,CAAC;;IAG5D;IACA,IAAI,CAACH,MAAM,CAACI,IAAI,CAACN,KAAK,CAAC;EAC3B;EAEAO,MAAM,CAACP,KAAqB;IACxB;IACA,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,CAACM,MAAM,CAACJ,CAAC,IAAIA,CAAC,KAAKJ,KAAK,CAAC;EACtD;EAEAS,IAAI,CAACR,EAAU;IACX;IACA,MAAMD,KAAK,GAAG,IAAI,CAACE,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IAEhD,IAAI,CAACD,KAAK,EAAE;MACR,MAAM,IAAIK,KAAK,CAAC,UAAUJ,EAAE,aAAa,CAAC;;IAG9CD,KAAK,CAACS,IAAI,EAAE;IACZC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,MAAM,CAAC;EAC5B;EAEAU,KAAK;IACD;IACA,MAAMZ,KAAK,GAAG,IAAI,CAACE,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACS,MAAM,CAAC;IAC7Cb,KAAK,EAAEY,KAAK,EAAE;EAClB;;AAlCSf,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAiB,SAAZjB,YAAY;EAAAkB,YADC;AAAM","names":["ModalService","constructor","add","modal","id","modals","find","x","Error","push","remove","filter","open","console","log","close","isOpen","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\DELL\\source\\repos\\MondayApp\\ClientApp\\src\\services\\modal\\modal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { ModalComponent } from '../../app/modal/modal.component';\n\n@Injectable({ providedIn: 'root' })\nexport class ModalService {\n    private modals: ModalComponent[] = [];\n\n    add(modal: ModalComponent) {\n        // ensure component has a unique id attribute\n        if (!modal.id || this.modals.find(x => x.id === modal.id)) {\n            throw new Error('modal must have a unique id attribute');\n        }\n\n        // add modal to array of active modals\n        this.modals.push(modal);\n    }\n\n    remove(modal: ModalComponent) {\n        // remove modal from array of active modals\n        this.modals = this.modals.filter(x => x === modal);\n    }\n\n    open(id: string) {\n        // open modal specified by id\n        const modal = this.modals.find(x => x.id === id);\n\n        if (!modal) {\n            throw new Error(`modal '${id}' not found`);\n        }\n\n        modal.open();\n        console.log(this.modals);\n    }\n\n    close() {\n        // close the modal that is currently open\n        const modal = this.modals.find(x => x.isOpen);\n        modal?.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}