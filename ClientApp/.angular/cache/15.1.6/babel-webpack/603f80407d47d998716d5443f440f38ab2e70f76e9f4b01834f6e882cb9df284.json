{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MondayService {\n  constructor(http) {\n    this.http = http;\n    this.mondayUrl = environment.baseUrl + 'api/Monday';\n  }\n  getMondays() {\n    return this.http.get(this.mondayUrl).pipe(catchError(this.handleError));\n  }\n  //getMonday(id: string | null): Observable<Monday> {\n  //  if (id === '') {\n  //    return of(this.initializeMonday());\n  //  }\n  //  const url = `${this.mondayUrl}/${id}`;\n  //  return this.http.get<Monday>(url)\n  //    .pipe(\n  //      catchError(this.handleError)\n  //    );\n  //}\n  handleError(err) {\n    let errorMessage;\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(() => errorMessage);\n  }\n  initializeMonday() {\n    return {\n      id: \"\",\n      name: \"\",\n      parent_task: \"\",\n      created_by: \"\",\n      created_date: \"\",\n      status: \"\"\n    };\n  }\n}\nMondayService.ɵfac = function MondayService_Factory(t) {\n  return new (t || MondayService)(i0.ɵɵinject(i1.HttpClient));\n};\nMondayService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MondayService,\n  factory: MondayService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAY,MAAM;AACjD,SAASC,UAAU,QAAa,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,cAAS,GAAGH,WAAW,CAACI,OAAO,GAAG,YAAY;EAEd;EAExCC,UAAU;IACR,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,IAAI,CAACC,SAAS,CAAC,CAC3CC,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,WAAW,CAAC,CAC7B;EACL;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACQA,WAAW,CAACC,GAAQ;IAC1B,IAAIC,YAAoB;IACxB,IAAID,GAAG,CAACE,KAAK,YAAYC,UAAU,EAAE;MACnCF,YAAY,GAAG,sBAAsBD,GAAG,CAACE,KAAK,CAACE,OAAO,EAAE;KACzD,MAAM;MACLH,YAAY,GAAG,yBAAyBD,GAAG,CAACK,MAAM,KAAKL,GAAG,CAACM,IAAI,CAACJ,KAAK,EAAE;;IAEzEK,OAAO,CAACL,KAAK,CAACF,GAAG,CAAC;IAClB,OAAOZ,UAAU,CAAC,MAAMa,YAAY,CAAC;EACvC;EAEQO,gBAAgB;IACtB,OAAO;MACLC,EAAE,EAAE,EAAE;MACNC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE,EAAE;MAChBR,MAAM,EAAE;KACT;EACH;;AA1CWd,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAuB,SAAbvB,aAAa;EAAAwB,YAFZ;AAAM","names":["throwError","catchError","environment","MondayService","constructor","http","baseUrl","getMondays","get","mondayUrl","pipe","handleError","err","errorMessage","error","ErrorEvent","message","status","body","console","initializeMonday","id","name","parent_task","created_by","created_date","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\DELL\\source\\repos\\MondayApp\\ClientApp\\src\\app\\monday\\monday.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Monday } from './monday';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MondayService {\n  private mondayUrl = environment.baseUrl + 'api/Monday';\n\n  constructor(private http: HttpClient) { }\n\n  getMondays(): Observable<Monday[]> {\n    return this.http.get<Monday[]>(this.mondayUrl)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  //getMonday(id: string | null): Observable<Monday> {\n  //  if (id === '') {\n  //    return of(this.initializeMonday());\n  //  }\n  //  const url = `${this.mondayUrl}/${id}`;\n  //  return this.http.get<Monday>(url)\n  //    .pipe(\n  //      catchError(this.handleError)\n  //    );\n  //}\n  private handleError(err: any) {\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(() => errorMessage);\n  }\n\n  private initializeMonday(): Monday {\n    return {\n      id: \"\",\n      name: \"\",\n      parent_task: \"\",\n      created_by: \"\",\n      created_date: \"\",\n      status: \"\"\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}