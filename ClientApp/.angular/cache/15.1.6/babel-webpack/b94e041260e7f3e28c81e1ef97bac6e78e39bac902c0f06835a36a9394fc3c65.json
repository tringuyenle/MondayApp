{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar function_1 = require(\"./function\");\nvar Monoid_1 = require(\"./Monoid\");\nvar Ord_1 = require(\"./Ord\");\nvar Eq_1 = require(\"./Eq\");\nvar pipeable_1 = require(\"./pipeable\");\nexports.URI = 'Option';\nvar None = /** @class */function () {\n  function None() {\n    this._tag = 'None';\n  }\n  /**\n   * Takes a function `f` and an `Option` of `A`. Maps `f` either on `None` or `Some`, Option's data constructors. If it\n   * maps on `Some` then it will apply the `f` on `Some`'s value, if it maps on `None` it will return `None`.\n   *\n   * @example\n   * import { some } from 'fp-ts/lib/Option'\n   *\n   * assert.deepStrictEqual(some(1).map(n => n * 2), some(2))\n   * @obsolete\n   */\n  None.prototype.map = function (f) {\n    return exports.none;\n  };\n  /**\n   * Maps `f` over this `Option`'s value. If the value returned from `f` is null or undefined, returns `None`\n   *\n   * @example\n   * import { none, some } from 'fp-ts/lib/Option'\n   *\n   * interface Foo {\n   *   bar?: {\n   *     baz?: string\n   *   }\n   * }\n   *\n   * assert.deepStrictEqual(\n   *   some<Foo>({ bar: { baz: 'quux' } })\n   *     .mapNullable(foo => foo.bar)\n   *     .mapNullable(bar => bar.baz),\n   *   some('quux')\n   * )\n   * assert.deepStrictEqual(\n   *   some<Foo>({ bar: {} })\n   *     .mapNullable(foo => foo.bar)\n   *     .mapNullable(bar => bar.baz),\n   *   none\n   * )\n   * assert.deepStrictEqual(\n   *   some<Foo>({})\n   *     .mapNullable(foo => foo.bar)\n   *     .mapNullable(bar => bar.baz),\n   *   none\n   * )\n   * @obsolete\n   */\n  None.prototype.mapNullable = function (f) {\n    return exports.none;\n  };\n  /**\n   * `ap`, some may also call it \"apply\". Takes a function `fab` that is in the context of `Option`, and applies that\n   * function to this `Option`'s value. If the `Option` calling `ap` is `none` it will return `none`.\n   *\n   * @example\n   * import { some, none } from 'fp-ts/lib/Option'\n   *\n   * assert.deepStrictEqual(some(2).ap(some((x: number) => x + 1)), some(3))\n   * assert.deepStrictEqual(none.ap(some((x: number) => x + 1)), none)\n   * @obsolete\n   */\n  None.prototype.ap = function (fab) {\n    return exports.none;\n  };\n  /**\n   * Flipped version of `ap`\n   *\n   * @example\n   * import { some, none } from 'fp-ts/lib/Option'\n   *\n   * assert.deepStrictEqual(some((x: number) => x + 1).ap_(some(2)), some(3))\n   * assert.deepStrictEqual(none.ap_(some(2)), none)\n   * @obsolete\n   */\n  None.prototype.ap_ = function (fb) {\n    return fb.ap(this);\n  };\n  /**\n   * Returns the result of applying f to this `Option`'s value if this `Option` is nonempty. Returns `None` if this\n   * `Option` is empty. Slightly different from `map` in that `f` is expected to return an `Option` (which could be\n   * `None`)\n   * @obsolete\n   */\n  None.prototype.chain = function (f) {\n    return exports.none;\n  };\n  /** @obsolete */\n  None.prototype.reduce = function (b, f) {\n    return b;\n  };\n  /**\n   * `alt` short for alternative, takes another `Option`. If this `Option` is a `Some` type then it will be returned, if\n   * it is a `None` then it will return the next `Some` if it exist. If both are `None` then it will return `none`.\n   *\n   * @example\n   * import { Option, some, none } from 'fp-ts/lib/Option'\n   *\n   * assert.deepStrictEqual(some(2).alt(some(4)), some(2))\n   * const fa: Option<number> = none\n   * assert.deepStrictEqual(fa.alt(some(4)), some(4))\n   * @obsolete\n   */\n  None.prototype.alt = function (fa) {\n    return fa;\n  };\n  /**\n   * Lazy version of `alt`\n   *\n   * @example\n   * import { some } from 'fp-ts/lib/Option'\n   *\n   * assert.deepStrictEqual(some(1).orElse(() => some(2)), some(1))\n   *\n   * @since 1.6.0\n   * @obsolete\n   */\n  None.prototype.orElse = function (fa) {\n    return fa();\n  };\n  /** @obsolete */\n  None.prototype.extend = function (f) {\n    return exports.none;\n  };\n  /**\n   * Applies a function to each case in the data structure\n   *\n   * @example\n   * import { none, some } from 'fp-ts/lib/Option'\n   *\n   * assert.strictEqual(some(1).fold('none', a => `some: ${a}`), 'some: 1')\n   * assert.strictEqual(none.fold('none', a => `some: ${a}`), 'none')\n   * @obsolete\n   */\n  None.prototype.fold = function (b, onSome) {\n    return b;\n  };\n  /**\n   * Lazy version of `fold`\n   * @obsolete\n   */\n  None.prototype.foldL = function (onNone, onSome) {\n    return onNone();\n  };\n  /**\n   * Returns the value from this `Some` or the given argument if this is a `None`\n   *\n   * @example\n   * import { Option, none, some } from 'fp-ts/lib/Option'\n   *\n   * assert.strictEqual(some(1).getOrElse(0), 1)\n   * const fa: Option<number> = none\n   * assert.strictEqual(fa.getOrElse(0), 0)\n   * @obsolete\n   */\n  None.prototype.getOrElse = function (a) {\n    return a;\n  };\n  /**\n   * Lazy version of `getOrElse`\n   * @obsolete\n   */\n  None.prototype.getOrElseL = function (f) {\n    return f();\n  };\n  /**\n   * Returns the value from this `Some` or `null` if this is a `None`\n   * @obsolete\n   */\n  None.prototype.toNullable = function () {\n    return null;\n  };\n  /**\n   * Returns the value from this `Some` or `undefined` if this is a `None`\n   * @obsolete\n   */\n  None.prototype.toUndefined = function () {\n    return undefined;\n  };\n  None.prototype.inspect = function () {\n    return this.toString();\n  };\n  None.prototype.toString = function () {\n    return 'none';\n  };\n  /**\n   * Returns `true` if the option has an element that is equal (as determined by `S`) to `a`, `false` otherwise\n   * @obsolete\n   */\n  None.prototype.contains = function (E, a) {\n    return false;\n  };\n  /**\n   * Returns `true` if the option is `None`, `false` otherwise\n   * @obsolete\n   */\n  None.prototype.isNone = function () {\n    return true;\n  };\n  /**\n   * Returns `true` if the option is an instance of `Some`, `false` otherwise\n   * @obsolete\n   */\n  None.prototype.isSome = function () {\n    return false;\n  };\n  /**\n   * Returns `true` if this option is non empty and the predicate `p` returns `true` when applied to this Option's value\n   * @obsolete\n   */\n  None.prototype.exists = function (p) {\n    return false;\n  };\n  None.prototype.filter = function (p) {\n    return exports.none;\n  };\n  /**\n   * Use `filter` instead.\n   * Returns this option refined as `Option<B>` if it is non empty and the `refinement` returns `true` when applied to\n   * this Option's value. Otherwise returns `None`\n   * @since 1.3.0\n   * @deprecated\n   */\n  None.prototype.refine = function (refinement) {\n    return exports.none;\n  };\n  None.value = new None();\n  return None;\n}();\nexports.None = None;\n/**\n * @since 1.0.0\n */\nexports.none = None.value;\nvar Some = /** @class */function () {\n  function Some(value) {\n    this.value = value;\n    this._tag = 'Some';\n  }\n  Some.prototype.map = function (f) {\n    return new Some(f(this.value));\n  };\n  Some.prototype.mapNullable = function (f) {\n    return exports.fromNullable(f(this.value));\n  };\n  Some.prototype.ap = function (fab) {\n    return fab.isNone() ? exports.none : new Some(fab.value(this.value));\n  };\n  Some.prototype.ap_ = function (fb) {\n    return fb.ap(this);\n  };\n  Some.prototype.chain = function (f) {\n    return f(this.value);\n  };\n  Some.prototype.reduce = function (b, f) {\n    return f(b, this.value);\n  };\n  Some.prototype.alt = function (fa) {\n    return this;\n  };\n  Some.prototype.orElse = function (fa) {\n    return this;\n  };\n  Some.prototype.extend = function (f) {\n    return new Some(f(this));\n  };\n  Some.prototype.fold = function (b, onSome) {\n    return onSome(this.value);\n  };\n  Some.prototype.foldL = function (onNone, onSome) {\n    return onSome(this.value);\n  };\n  Some.prototype.getOrElse = function (a) {\n    return this.value;\n  };\n  Some.prototype.getOrElseL = function (f) {\n    return this.value;\n  };\n  Some.prototype.toNullable = function () {\n    return this.value;\n  };\n  Some.prototype.toUndefined = function () {\n    return this.value;\n  };\n  Some.prototype.inspect = function () {\n    return this.toString();\n  };\n  Some.prototype.toString = function () {\n    // tslint:disable-next-line: deprecation\n    return \"some(\" + function_1.toString(this.value) + \")\";\n  };\n  Some.prototype.contains = function (E, a) {\n    return E.equals(this.value, a);\n  };\n  Some.prototype.isNone = function () {\n    return false;\n  };\n  Some.prototype.isSome = function () {\n    return true;\n  };\n  Some.prototype.exists = function (p) {\n    return p(this.value);\n  };\n  Some.prototype.filter = function (p) {\n    return this.exists(p) ? this : exports.none;\n  };\n  Some.prototype.refine = function (refinement) {\n    return this.filter(refinement);\n  };\n  return Some;\n}();\nexports.Some = Some;\n/**\n * @since 1.17.0\n */\nexports.getShow = function (S) {\n  return {\n    show: function (oa) {\n      return oa.fold('none', function (a) {\n        return \"some(\" + S.show(a) + \")\";\n      });\n    }\n  };\n};\n/**\n * Use `getEq`\n *\n * @since 1.0.0\n * @deprecated\n */\nexports.getSetoid = getEq;\n/**\n * @example\n * import { none, some, getEq } from 'fp-ts/lib/Option'\n * import { eqNumber } from 'fp-ts/lib/Eq'\n *\n * const S = getEq(eqNumber)\n * assert.strictEqual(S.equals(none, none), true)\n * assert.strictEqual(S.equals(none, some(1)), false)\n * assert.strictEqual(S.equals(some(1), none), false)\n * assert.strictEqual(S.equals(some(1), some(2)), false)\n * assert.strictEqual(S.equals(some(1), some(1)), true)\n *\n * @since 1.19.0\n */\nfunction getEq(E) {\n  return Eq_1.fromEquals(function (x, y) {\n    return x.isNone() ? y.isNone() : y.isNone() ? false : E.equals(x.value, y.value);\n  });\n}\nexports.getEq = getEq;\n/**\n * The `Ord` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Ord` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n *\n * @example\n * import { none, some, getOrd } from 'fp-ts/lib/Option'\n * import { ordNumber } from 'fp-ts/lib/Ord'\n *\n * const O = getOrd(ordNumber)\n * assert.strictEqual(O.compare(none, none), 0)\n * assert.strictEqual(O.compare(none, some(1)), -1)\n * assert.strictEqual(O.compare(some(1), none), 1)\n * assert.strictEqual(O.compare(some(1), some(2)), -1)\n * assert.strictEqual(O.compare(some(1), some(1)), 0)\n *\n * @since 1.2.0\n */\nexports.getOrd = function (O) {\n  return Ord_1.fromCompare(function (x, y) {\n    return x.isSome() ? y.isSome() ? O.compare(x.value, y.value) : 1 : -1;\n  });\n};\n/**\n * @since 1.0.0\n */\nexports.some = function (a) {\n  return new Some(a);\n};\n/**\n * `Apply` semigroup\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | none               |\n * | none    | some(a) | none               |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getApplySemigroup, some, none } from 'fp-ts/lib/Option'\n * import { semigroupSum } from 'fp-ts/lib/Semigroup'\n *\n * const S = getApplySemigroup(semigroupSum)\n * assert.deepStrictEqual(S.concat(none, none), none)\n * assert.deepStrictEqual(S.concat(some(1), none), none)\n * assert.deepStrictEqual(S.concat(none, some(1)), none)\n * assert.deepStrictEqual(S.concat(some(1), some(2)), some(3))\n *\n * @since 1.7.0\n */\nexports.getApplySemigroup = function (S) {\n  return {\n    concat: function (x, y) {\n      return x.isSome() && y.isSome() ? exports.some(S.concat(x.value, y.value)) : exports.none;\n    }\n  };\n};\n/**\n * @since 1.7.0\n */\nexports.getApplyMonoid = function (M) {\n  return __assign({}, exports.getApplySemigroup(M), {\n    empty: exports.some(M.empty)\n  });\n};\n/**\n * Monoid returning the left-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(a)      |\n *\n * @example\n * import { getFirstMonoid, some, none } from 'fp-ts/lib/Option'\n *\n * const M = getFirstMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))\n *\n * @since 1.0.0\n */\nexports.getFirstMonoid = function () {\n  return {\n    concat: exports.option.alt,\n    empty: exports.none\n  };\n};\n/**\n * Monoid returning the right-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(b)      |\n *\n * @example\n * import { getLastMonoid, some, none } from 'fp-ts/lib/Option'\n *\n * const M = getLastMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))\n *\n * @since 1.0.0\n */\nexports.getLastMonoid = function () {\n  return Monoid_1.getDualMonoid(exports.getFirstMonoid());\n};\n/**\n * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are\n * appended using the provided `Semigroup`\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | some(a)            |\n * | none    | some(a) | some(a)            |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getMonoid, some, none } from 'fp-ts/lib/Option'\n * import { semigroupSum } from 'fp-ts/lib/Semigroup'\n *\n * const M = getMonoid(semigroupSum)\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))\n *\n * @since 1.0.0\n */\nexports.getMonoid = function (S) {\n  return {\n    concat: function (x, y) {\n      return x.isNone() ? y : y.isNone() ? x : exports.some(S.concat(x.value, y.value));\n    },\n    empty: exports.none\n  };\n};\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`\n *\n * @example\n * import { none, some, fromNullable } from 'fp-ts/lib/Option'\n *\n * assert.deepStrictEqual(fromNullable(undefined), none)\n * assert.deepStrictEqual(fromNullable(null), none)\n * assert.deepStrictEqual(fromNullable(1), some(1))\n *\n * @since 1.0.0\n */\nexports.fromNullable = function (a) {\n  return a == null ? exports.none : new Some(a);\n};\nfunction fromPredicate(predicate) {\n  return function (a) {\n    return predicate(a) ? exports.some(a) : exports.none;\n  };\n}\nexports.fromPredicate = fromPredicate;\n/**\n * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in\n * `Some`\n *\n * @example\n * import { none, some, tryCatch } from 'fp-ts/lib/Option'\n *\n * assert.deepStrictEqual(\n *   tryCatch(() => {\n *     throw new Error()\n *   }),\n *   none\n * )\n * assert.deepStrictEqual(tryCatch(() => 1), some(1))\n *\n * @since 1.0.0\n */\nexports.tryCatch = function (f) {\n  try {\n    return exports.some(f());\n  } catch (e) {\n    return exports.none;\n  }\n};\n/**\n * Constructs a new `Option` from a `Either`. If the value is a `Left`, returns `None`, otherwise returns the inner\n * value wrapped in a `Some`\n *\n * @example\n * import { none, some, fromEither } from 'fp-ts/lib/Option'\n * import { left, right } from 'fp-ts/lib/Either'\n *\n * assert.deepStrictEqual(fromEither(left(1)), none)\n * assert.deepStrictEqual(fromEither(right(1)), some(1))\n *\n * @since 1.0.0\n */\nexports.fromEither = function (fa) {\n  return fa.isLeft() ? exports.none : exports.some(fa.value);\n};\n/**\n * Returns `true` if the option is an instance of `Some`, `false` otherwise\n *\n * @since 1.0.0\n */\nexports.isSome = function (fa) {\n  return fa.isSome();\n};\n/**\n * Returns `true` if the option is `None`, `false` otherwise\n *\n * @since 1.0.0\n */\nexports.isNone = function (fa) {\n  return fa.isNone();\n};\n/**\n * Use `fromPredicate` instead.\n * Refinement version of `fromPredicate`\n *\n * @since 1.3.0\n * @deprecated\n */\nexports.fromRefinement = function (refinement) {\n  return function (a) {\n    return refinement(a) ? exports.some(a) : exports.none;\n  };\n};\n/**\n * Returns a refinement from a prism.\n * This function ensures that a custom type guard definition is type-safe.\n *\n * ```ts\n * import { some, none, getRefinement } from 'fp-ts/lib/Option'\n *\n * type A = { type: 'A' }\n * type B = { type: 'B' }\n * type C = A | B\n *\n * const isA = (c: C): c is A => c.type === 'B' // <= typo but typescript doesn't complain\n * const isA = getRefinement<C, A>(c => (c.type === 'B' ? some(c) : none)) // static error: Type '\"B\"' is not assignable to type '\"A\"'\n * ```\n *\n * @since 1.7.0\n */\nexports.getRefinement = function (getOption) {\n  return function (a) {\n    return getOption(a).isSome();\n  };\n};\nvar defaultSeparate = {\n  left: exports.none,\n  right: exports.none\n};\n/**\n * @since 1.0.0\n */\nexports.option = {\n  URI: exports.URI,\n  map: function (ma, f) {\n    return exports.isNone(ma) ? exports.none : exports.some(f(ma.value));\n  },\n  of: exports.some,\n  ap: function (mab, ma) {\n    return exports.isNone(mab) ? exports.none : exports.isNone(ma) ? exports.none : exports.some(mab.value(ma.value));\n  },\n  chain: function (ma, f) {\n    return exports.isNone(ma) ? exports.none : f(ma.value);\n  },\n  reduce: function (fa, b, f) {\n    return exports.isNone(fa) ? b : f(b, fa.value);\n  },\n  foldMap: function (M) {\n    return function (fa, f) {\n      return exports.isNone(fa) ? M.empty : f(fa.value);\n    };\n  },\n  foldr: function (fa, b, f) {\n    return exports.isNone(fa) ? b : f(fa.value, b);\n  },\n  traverse: function (F) {\n    return function (ta, f) {\n      return exports.isNone(ta) ? F.of(exports.none) : F.map(f(ta.value), exports.some);\n    };\n  },\n  sequence: function (F) {\n    return function (ta) {\n      return exports.isNone(ta) ? F.of(exports.none) : F.map(ta.value, exports.some);\n    };\n  },\n  zero: function () {\n    return exports.none;\n  },\n  alt: function (mx, my) {\n    return exports.isNone(mx) ? my : mx;\n  },\n  extend: function (wa, f) {\n    return exports.isNone(wa) ? exports.none : exports.some(f(wa));\n  },\n  compact: function (ma) {\n    return exports.option.chain(ma, function_1.identity);\n  },\n  separate: function (ma) {\n    var o = exports.option.map(ma, function (e) {\n      return {\n        left: getLeft(e),\n        right: getRight(e)\n      };\n    });\n    return exports.isNone(o) ? defaultSeparate : o.value;\n  },\n  filter: function (fa, predicate) {\n    return exports.isNone(fa) ? exports.none : predicate(fa.value) ? fa : exports.none;\n  },\n  filterMap: function (ma, f) {\n    return exports.isNone(ma) ? exports.none : f(ma.value);\n  },\n  partition: function (fa, predicate) {\n    return {\n      left: exports.option.filter(fa, function (a) {\n        return !predicate(a);\n      }),\n      right: exports.option.filter(fa, predicate)\n    };\n  },\n  partitionMap: function (fa, f) {\n    return exports.option.separate(exports.option.map(fa, f));\n  },\n  wither: function (F) {\n    return function (fa, f) {\n      return exports.isNone(fa) ? F.of(exports.none) : f(fa.value);\n    };\n  },\n  wilt: function (F) {\n    return function (fa, f) {\n      var o = exports.option.map(fa, function (a) {\n        return F.map(f(a), function (e) {\n          return {\n            left: getLeft(e),\n            right: getRight(e)\n          };\n        });\n      });\n      return exports.isNone(o) ? F.of({\n        left: exports.none,\n        right: exports.none\n      }) : o.value;\n    };\n  },\n  throwError: function () {\n    return exports.none;\n  },\n  fromEither: exports.fromEither,\n  fromOption: function_1.identity\n};\n//\n// backporting\n//\n/**\n * Returns an `L` value if possible\n *\n * @since 1.19.0\n */\nfunction getLeft(ma) {\n  return ma._tag === 'Right' ? exports.none : exports.some(ma.value);\n}\nexports.getLeft = getLeft;\n/**\n * Returns an `A` value if possible\n *\n * @since 1.19.0\n */\nfunction getRight(ma) {\n  return ma._tag === 'Left' ? exports.none : exports.some(ma.value);\n}\nexports.getRight = getRight;\n/**\n * @since 1.19.0\n */\nfunction fold(onNone, onSome) {\n  return function (ma) {\n    return ma.foldL(onNone, onSome);\n  };\n}\nexports.fold = fold;\n/**\n * @since 1.19.0\n */\nfunction toNullable(ma) {\n  return ma.toNullable();\n}\nexports.toNullable = toNullable;\n/**\n * @since 1.19.0\n */\nfunction toUndefined(ma) {\n  return ma.toUndefined();\n}\nexports.toUndefined = toUndefined;\n/**\n * @since 1.19.0\n */\nfunction getOrElse(f) {\n  return function (ma) {\n    return ma.getOrElseL(f);\n  };\n}\nexports.getOrElse = getOrElse;\n/**\n * @since 1.19.0\n */\nfunction elem(E) {\n  return function (a) {\n    return function (ma) {\n      return ma.contains(E, a);\n    };\n  };\n}\nexports.elem = elem;\n/**\n * @since 1.19.0\n */\nfunction exists(predicate) {\n  return function (ma) {\n    return ma.exists(predicate);\n  };\n}\nexports.exists = exists;\n/**\n * @since 1.19.0\n */\nfunction mapNullable(f) {\n  return function (ma) {\n    return ma.mapNullable(f);\n  };\n}\nexports.mapNullable = mapNullable;\nvar _a = pipeable_1.pipeable(exports.option),\n  alt = _a.alt,\n  ap = _a.ap,\n  apFirst = _a.apFirst,\n  apSecond = _a.apSecond,\n  chain = _a.chain,\n  chainFirst = _a.chainFirst,\n  duplicate = _a.duplicate,\n  extend = _a.extend,\n  filter = _a.filter,\n  filterMap = _a.filterMap,\n  flatten = _a.flatten,\n  foldMap = _a.foldMap,\n  map = _a.map,\n  partition = _a.partition,\n  partitionMap = _a.partitionMap,\n  reduce = _a.reduce,\n  reduceRight = _a.reduceRight,\n  compact = _a.compact,\n  separate = _a.separate;\nexports.alt = alt;\nexports.ap = ap;\nexports.apFirst = apFirst;\nexports.apSecond = apSecond;\nexports.chain = chain;\nexports.chainFirst = chainFirst;\nexports.duplicate = duplicate;\nexports.extend = extend;\nexports.filter = filter;\nexports.filterMap = filterMap;\nexports.flatten = flatten;\nexports.foldMap = foldMap;\nexports.map = map;\nexports.partition = partition;\nexports.partitionMap = partitionMap;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.compact = compact;\nexports.separate = separate;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","function_1","require","Monoid_1","Ord_1","Eq_1","pipeable_1","URI","None","_tag","map","f","none","mapNullable","ap","fab","ap_","fb","chain","reduce","b","alt","fa","orElse","extend","fold","onSome","foldL","onNone","getOrElse","a","getOrElseL","toNullable","toUndefined","undefined","inspect","toString","contains","E","isNone","isSome","exists","filter","refine","refinement","Some","fromNullable","equals","getShow","S","show","oa","getSetoid","getEq","fromEquals","x","y","getOrd","O","fromCompare","compare","some","getApplySemigroup","concat","getApplyMonoid","M","empty","getFirstMonoid","option","getLastMonoid","getDualMonoid","getMonoid","fromPredicate","predicate","tryCatch","e","fromEither","isLeft","fromRefinement","getRefinement","getOption","defaultSeparate","left","right","ma","of","mab","foldMap","foldr","traverse","F","ta","sequence","zero","mx","my","wa","compact","identity","separate","o","getLeft","getRight","filterMap","partition","partitionMap","wither","wilt","throwError","fromOption","elem","_a","pipeable","apFirst","apSecond","chainFirst","duplicate","flatten","reduceRight"],"sources":["C:/Users/DELL/source/repos/MondayApp/ClientApp/node_modules/fp-ts/lib/Option.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar function_1 = require(\"./function\");\nvar Monoid_1 = require(\"./Monoid\");\nvar Ord_1 = require(\"./Ord\");\nvar Eq_1 = require(\"./Eq\");\nvar pipeable_1 = require(\"./pipeable\");\nexports.URI = 'Option';\nvar None = /** @class */ (function () {\n    function None() {\n        this._tag = 'None';\n    }\n    /**\n     * Takes a function `f` and an `Option` of `A`. Maps `f` either on `None` or `Some`, Option's data constructors. If it\n     * maps on `Some` then it will apply the `f` on `Some`'s value, if it maps on `None` it will return `None`.\n     *\n     * @example\n     * import { some } from 'fp-ts/lib/Option'\n     *\n     * assert.deepStrictEqual(some(1).map(n => n * 2), some(2))\n     * @obsolete\n     */\n    None.prototype.map = function (f) {\n        return exports.none;\n    };\n    /**\n     * Maps `f` over this `Option`'s value. If the value returned from `f` is null or undefined, returns `None`\n     *\n     * @example\n     * import { none, some } from 'fp-ts/lib/Option'\n     *\n     * interface Foo {\n     *   bar?: {\n     *     baz?: string\n     *   }\n     * }\n     *\n     * assert.deepStrictEqual(\n     *   some<Foo>({ bar: { baz: 'quux' } })\n     *     .mapNullable(foo => foo.bar)\n     *     .mapNullable(bar => bar.baz),\n     *   some('quux')\n     * )\n     * assert.deepStrictEqual(\n     *   some<Foo>({ bar: {} })\n     *     .mapNullable(foo => foo.bar)\n     *     .mapNullable(bar => bar.baz),\n     *   none\n     * )\n     * assert.deepStrictEqual(\n     *   some<Foo>({})\n     *     .mapNullable(foo => foo.bar)\n     *     .mapNullable(bar => bar.baz),\n     *   none\n     * )\n     * @obsolete\n     */\n    None.prototype.mapNullable = function (f) {\n        return exports.none;\n    };\n    /**\n     * `ap`, some may also call it \"apply\". Takes a function `fab` that is in the context of `Option`, and applies that\n     * function to this `Option`'s value. If the `Option` calling `ap` is `none` it will return `none`.\n     *\n     * @example\n     * import { some, none } from 'fp-ts/lib/Option'\n     *\n     * assert.deepStrictEqual(some(2).ap(some((x: number) => x + 1)), some(3))\n     * assert.deepStrictEqual(none.ap(some((x: number) => x + 1)), none)\n     * @obsolete\n     */\n    None.prototype.ap = function (fab) {\n        return exports.none;\n    };\n    /**\n     * Flipped version of `ap`\n     *\n     * @example\n     * import { some, none } from 'fp-ts/lib/Option'\n     *\n     * assert.deepStrictEqual(some((x: number) => x + 1).ap_(some(2)), some(3))\n     * assert.deepStrictEqual(none.ap_(some(2)), none)\n     * @obsolete\n     */\n    None.prototype.ap_ = function (fb) {\n        return fb.ap(this);\n    };\n    /**\n     * Returns the result of applying f to this `Option`'s value if this `Option` is nonempty. Returns `None` if this\n     * `Option` is empty. Slightly different from `map` in that `f` is expected to return an `Option` (which could be\n     * `None`)\n     * @obsolete\n     */\n    None.prototype.chain = function (f) {\n        return exports.none;\n    };\n    /** @obsolete */\n    None.prototype.reduce = function (b, f) {\n        return b;\n    };\n    /**\n     * `alt` short for alternative, takes another `Option`. If this `Option` is a `Some` type then it will be returned, if\n     * it is a `None` then it will return the next `Some` if it exist. If both are `None` then it will return `none`.\n     *\n     * @example\n     * import { Option, some, none } from 'fp-ts/lib/Option'\n     *\n     * assert.deepStrictEqual(some(2).alt(some(4)), some(2))\n     * const fa: Option<number> = none\n     * assert.deepStrictEqual(fa.alt(some(4)), some(4))\n     * @obsolete\n     */\n    None.prototype.alt = function (fa) {\n        return fa;\n    };\n    /**\n     * Lazy version of `alt`\n     *\n     * @example\n     * import { some } from 'fp-ts/lib/Option'\n     *\n     * assert.deepStrictEqual(some(1).orElse(() => some(2)), some(1))\n     *\n     * @since 1.6.0\n     * @obsolete\n     */\n    None.prototype.orElse = function (fa) {\n        return fa();\n    };\n    /** @obsolete */\n    None.prototype.extend = function (f) {\n        return exports.none;\n    };\n    /**\n     * Applies a function to each case in the data structure\n     *\n     * @example\n     * import { none, some } from 'fp-ts/lib/Option'\n     *\n     * assert.strictEqual(some(1).fold('none', a => `some: ${a}`), 'some: 1')\n     * assert.strictEqual(none.fold('none', a => `some: ${a}`), 'none')\n     * @obsolete\n     */\n    None.prototype.fold = function (b, onSome) {\n        return b;\n    };\n    /**\n     * Lazy version of `fold`\n     * @obsolete\n     */\n    None.prototype.foldL = function (onNone, onSome) {\n        return onNone();\n    };\n    /**\n     * Returns the value from this `Some` or the given argument if this is a `None`\n     *\n     * @example\n     * import { Option, none, some } from 'fp-ts/lib/Option'\n     *\n     * assert.strictEqual(some(1).getOrElse(0), 1)\n     * const fa: Option<number> = none\n     * assert.strictEqual(fa.getOrElse(0), 0)\n     * @obsolete\n     */\n    None.prototype.getOrElse = function (a) {\n        return a;\n    };\n    /**\n     * Lazy version of `getOrElse`\n     * @obsolete\n     */\n    None.prototype.getOrElseL = function (f) {\n        return f();\n    };\n    /**\n     * Returns the value from this `Some` or `null` if this is a `None`\n     * @obsolete\n     */\n    None.prototype.toNullable = function () {\n        return null;\n    };\n    /**\n     * Returns the value from this `Some` or `undefined` if this is a `None`\n     * @obsolete\n     */\n    None.prototype.toUndefined = function () {\n        return undefined;\n    };\n    None.prototype.inspect = function () {\n        return this.toString();\n    };\n    None.prototype.toString = function () {\n        return 'none';\n    };\n    /**\n     * Returns `true` if the option has an element that is equal (as determined by `S`) to `a`, `false` otherwise\n     * @obsolete\n     */\n    None.prototype.contains = function (E, a) {\n        return false;\n    };\n    /**\n     * Returns `true` if the option is `None`, `false` otherwise\n     * @obsolete\n     */\n    None.prototype.isNone = function () {\n        return true;\n    };\n    /**\n     * Returns `true` if the option is an instance of `Some`, `false` otherwise\n     * @obsolete\n     */\n    None.prototype.isSome = function () {\n        return false;\n    };\n    /**\n     * Returns `true` if this option is non empty and the predicate `p` returns `true` when applied to this Option's value\n     * @obsolete\n     */\n    None.prototype.exists = function (p) {\n        return false;\n    };\n    None.prototype.filter = function (p) {\n        return exports.none;\n    };\n    /**\n     * Use `filter` instead.\n     * Returns this option refined as `Option<B>` if it is non empty and the `refinement` returns `true` when applied to\n     * this Option's value. Otherwise returns `None`\n     * @since 1.3.0\n     * @deprecated\n     */\n    None.prototype.refine = function (refinement) {\n        return exports.none;\n    };\n    None.value = new None();\n    return None;\n}());\nexports.None = None;\n/**\n * @since 1.0.0\n */\nexports.none = None.value;\nvar Some = /** @class */ (function () {\n    function Some(value) {\n        this.value = value;\n        this._tag = 'Some';\n    }\n    Some.prototype.map = function (f) {\n        return new Some(f(this.value));\n    };\n    Some.prototype.mapNullable = function (f) {\n        return exports.fromNullable(f(this.value));\n    };\n    Some.prototype.ap = function (fab) {\n        return fab.isNone() ? exports.none : new Some(fab.value(this.value));\n    };\n    Some.prototype.ap_ = function (fb) {\n        return fb.ap(this);\n    };\n    Some.prototype.chain = function (f) {\n        return f(this.value);\n    };\n    Some.prototype.reduce = function (b, f) {\n        return f(b, this.value);\n    };\n    Some.prototype.alt = function (fa) {\n        return this;\n    };\n    Some.prototype.orElse = function (fa) {\n        return this;\n    };\n    Some.prototype.extend = function (f) {\n        return new Some(f(this));\n    };\n    Some.prototype.fold = function (b, onSome) {\n        return onSome(this.value);\n    };\n    Some.prototype.foldL = function (onNone, onSome) {\n        return onSome(this.value);\n    };\n    Some.prototype.getOrElse = function (a) {\n        return this.value;\n    };\n    Some.prototype.getOrElseL = function (f) {\n        return this.value;\n    };\n    Some.prototype.toNullable = function () {\n        return this.value;\n    };\n    Some.prototype.toUndefined = function () {\n        return this.value;\n    };\n    Some.prototype.inspect = function () {\n        return this.toString();\n    };\n    Some.prototype.toString = function () {\n        // tslint:disable-next-line: deprecation\n        return \"some(\" + function_1.toString(this.value) + \")\";\n    };\n    Some.prototype.contains = function (E, a) {\n        return E.equals(this.value, a);\n    };\n    Some.prototype.isNone = function () {\n        return false;\n    };\n    Some.prototype.isSome = function () {\n        return true;\n    };\n    Some.prototype.exists = function (p) {\n        return p(this.value);\n    };\n    Some.prototype.filter = function (p) {\n        return this.exists(p) ? this : exports.none;\n    };\n    Some.prototype.refine = function (refinement) {\n        return this.filter(refinement);\n    };\n    return Some;\n}());\nexports.Some = Some;\n/**\n * @since 1.17.0\n */\nexports.getShow = function (S) {\n    return {\n        show: function (oa) { return oa.fold('none', function (a) { return \"some(\" + S.show(a) + \")\"; }); }\n    };\n};\n/**\n * Use `getEq`\n *\n * @since 1.0.0\n * @deprecated\n */\nexports.getSetoid = getEq;\n/**\n * @example\n * import { none, some, getEq } from 'fp-ts/lib/Option'\n * import { eqNumber } from 'fp-ts/lib/Eq'\n *\n * const S = getEq(eqNumber)\n * assert.strictEqual(S.equals(none, none), true)\n * assert.strictEqual(S.equals(none, some(1)), false)\n * assert.strictEqual(S.equals(some(1), none), false)\n * assert.strictEqual(S.equals(some(1), some(2)), false)\n * assert.strictEqual(S.equals(some(1), some(1)), true)\n *\n * @since 1.19.0\n */\nfunction getEq(E) {\n    return Eq_1.fromEquals(function (x, y) { return (x.isNone() ? y.isNone() : y.isNone() ? false : E.equals(x.value, y.value)); });\n}\nexports.getEq = getEq;\n/**\n * The `Ord` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Ord` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n *\n * @example\n * import { none, some, getOrd } from 'fp-ts/lib/Option'\n * import { ordNumber } from 'fp-ts/lib/Ord'\n *\n * const O = getOrd(ordNumber)\n * assert.strictEqual(O.compare(none, none), 0)\n * assert.strictEqual(O.compare(none, some(1)), -1)\n * assert.strictEqual(O.compare(some(1), none), 1)\n * assert.strictEqual(O.compare(some(1), some(2)), -1)\n * assert.strictEqual(O.compare(some(1), some(1)), 0)\n *\n * @since 1.2.0\n */\nexports.getOrd = function (O) {\n    return Ord_1.fromCompare(function (x, y) { return (x.isSome() ? (y.isSome() ? O.compare(x.value, y.value) : 1) : -1); });\n};\n/**\n * @since 1.0.0\n */\nexports.some = function (a) {\n    return new Some(a);\n};\n/**\n * `Apply` semigroup\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | none               |\n * | none    | some(a) | none               |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getApplySemigroup, some, none } from 'fp-ts/lib/Option'\n * import { semigroupSum } from 'fp-ts/lib/Semigroup'\n *\n * const S = getApplySemigroup(semigroupSum)\n * assert.deepStrictEqual(S.concat(none, none), none)\n * assert.deepStrictEqual(S.concat(some(1), none), none)\n * assert.deepStrictEqual(S.concat(none, some(1)), none)\n * assert.deepStrictEqual(S.concat(some(1), some(2)), some(3))\n *\n * @since 1.7.0\n */\nexports.getApplySemigroup = function (S) {\n    return {\n        concat: function (x, y) { return (x.isSome() && y.isSome() ? exports.some(S.concat(x.value, y.value)) : exports.none); }\n    };\n};\n/**\n * @since 1.7.0\n */\nexports.getApplyMonoid = function (M) {\n    return __assign({}, exports.getApplySemigroup(M), { empty: exports.some(M.empty) });\n};\n/**\n * Monoid returning the left-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(a)      |\n *\n * @example\n * import { getFirstMonoid, some, none } from 'fp-ts/lib/Option'\n *\n * const M = getFirstMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))\n *\n * @since 1.0.0\n */\nexports.getFirstMonoid = function () {\n    return {\n        concat: exports.option.alt,\n        empty: exports.none\n    };\n};\n/**\n * Monoid returning the right-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(b)      |\n *\n * @example\n * import { getLastMonoid, some, none } from 'fp-ts/lib/Option'\n *\n * const M = getLastMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))\n *\n * @since 1.0.0\n */\nexports.getLastMonoid = function () {\n    return Monoid_1.getDualMonoid(exports.getFirstMonoid());\n};\n/**\n * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are\n * appended using the provided `Semigroup`\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | some(a)            |\n * | none    | some(a) | some(a)            |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getMonoid, some, none } from 'fp-ts/lib/Option'\n * import { semigroupSum } from 'fp-ts/lib/Semigroup'\n *\n * const M = getMonoid(semigroupSum)\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))\n *\n * @since 1.0.0\n */\nexports.getMonoid = function (S) {\n    return {\n        concat: function (x, y) { return (x.isNone() ? y : y.isNone() ? x : exports.some(S.concat(x.value, y.value))); },\n        empty: exports.none\n    };\n};\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`\n *\n * @example\n * import { none, some, fromNullable } from 'fp-ts/lib/Option'\n *\n * assert.deepStrictEqual(fromNullable(undefined), none)\n * assert.deepStrictEqual(fromNullable(null), none)\n * assert.deepStrictEqual(fromNullable(1), some(1))\n *\n * @since 1.0.0\n */\nexports.fromNullable = function (a) {\n    return a == null ? exports.none : new Some(a);\n};\nfunction fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? exports.some(a) : exports.none); };\n}\nexports.fromPredicate = fromPredicate;\n/**\n * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in\n * `Some`\n *\n * @example\n * import { none, some, tryCatch } from 'fp-ts/lib/Option'\n *\n * assert.deepStrictEqual(\n *   tryCatch(() => {\n *     throw new Error()\n *   }),\n *   none\n * )\n * assert.deepStrictEqual(tryCatch(() => 1), some(1))\n *\n * @since 1.0.0\n */\nexports.tryCatch = function (f) {\n    try {\n        return exports.some(f());\n    }\n    catch (e) {\n        return exports.none;\n    }\n};\n/**\n * Constructs a new `Option` from a `Either`. If the value is a `Left`, returns `None`, otherwise returns the inner\n * value wrapped in a `Some`\n *\n * @example\n * import { none, some, fromEither } from 'fp-ts/lib/Option'\n * import { left, right } from 'fp-ts/lib/Either'\n *\n * assert.deepStrictEqual(fromEither(left(1)), none)\n * assert.deepStrictEqual(fromEither(right(1)), some(1))\n *\n * @since 1.0.0\n */\nexports.fromEither = function (fa) {\n    return fa.isLeft() ? exports.none : exports.some(fa.value);\n};\n/**\n * Returns `true` if the option is an instance of `Some`, `false` otherwise\n *\n * @since 1.0.0\n */\nexports.isSome = function (fa) {\n    return fa.isSome();\n};\n/**\n * Returns `true` if the option is `None`, `false` otherwise\n *\n * @since 1.0.0\n */\nexports.isNone = function (fa) {\n    return fa.isNone();\n};\n/**\n * Use `fromPredicate` instead.\n * Refinement version of `fromPredicate`\n *\n * @since 1.3.0\n * @deprecated\n */\nexports.fromRefinement = function (refinement) { return function (a) {\n    return refinement(a) ? exports.some(a) : exports.none;\n}; };\n/**\n * Returns a refinement from a prism.\n * This function ensures that a custom type guard definition is type-safe.\n *\n * ```ts\n * import { some, none, getRefinement } from 'fp-ts/lib/Option'\n *\n * type A = { type: 'A' }\n * type B = { type: 'B' }\n * type C = A | B\n *\n * const isA = (c: C): c is A => c.type === 'B' // <= typo but typescript doesn't complain\n * const isA = getRefinement<C, A>(c => (c.type === 'B' ? some(c) : none)) // static error: Type '\"B\"' is not assignable to type '\"A\"'\n * ```\n *\n * @since 1.7.0\n */\nexports.getRefinement = function (getOption) {\n    return function (a) { return getOption(a).isSome(); };\n};\nvar defaultSeparate = { left: exports.none, right: exports.none };\n/**\n * @since 1.0.0\n */\nexports.option = {\n    URI: exports.URI,\n    map: function (ma, f) { return (exports.isNone(ma) ? exports.none : exports.some(f(ma.value))); },\n    of: exports.some,\n    ap: function (mab, ma) { return (exports.isNone(mab) ? exports.none : exports.isNone(ma) ? exports.none : exports.some(mab.value(ma.value))); },\n    chain: function (ma, f) { return (exports.isNone(ma) ? exports.none : f(ma.value)); },\n    reduce: function (fa, b, f) { return (exports.isNone(fa) ? b : f(b, fa.value)); },\n    foldMap: function (M) { return function (fa, f) { return (exports.isNone(fa) ? M.empty : f(fa.value)); }; },\n    foldr: function (fa, b, f) { return (exports.isNone(fa) ? b : f(fa.value, b)); },\n    traverse: function (F) { return function (ta, f) {\n        return exports.isNone(ta) ? F.of(exports.none) : F.map(f(ta.value), exports.some);\n    }; },\n    sequence: function (F) { return function (ta) {\n        return exports.isNone(ta) ? F.of(exports.none) : F.map(ta.value, exports.some);\n    }; },\n    zero: function () { return exports.none; },\n    alt: function (mx, my) { return (exports.isNone(mx) ? my : mx); },\n    extend: function (wa, f) { return (exports.isNone(wa) ? exports.none : exports.some(f(wa))); },\n    compact: function (ma) { return exports.option.chain(ma, function_1.identity); },\n    separate: function (ma) {\n        var o = exports.option.map(ma, function (e) { return ({\n            left: getLeft(e),\n            right: getRight(e)\n        }); });\n        return exports.isNone(o) ? defaultSeparate : o.value;\n    },\n    filter: function (fa, predicate) {\n        return exports.isNone(fa) ? exports.none : predicate(fa.value) ? fa : exports.none;\n    },\n    filterMap: function (ma, f) { return (exports.isNone(ma) ? exports.none : f(ma.value)); },\n    partition: function (fa, predicate) {\n        return {\n            left: exports.option.filter(fa, function (a) { return !predicate(a); }),\n            right: exports.option.filter(fa, predicate)\n        };\n    },\n    partitionMap: function (fa, f) { return exports.option.separate(exports.option.map(fa, f)); },\n    wither: function (F) { return function (fa, f) {\n        return exports.isNone(fa) ? F.of(exports.none) : f(fa.value);\n    }; },\n    wilt: function (F) { return function (fa, f) {\n        var o = exports.option.map(fa, function (a) {\n            return F.map(f(a), function (e) { return ({\n                left: getLeft(e),\n                right: getRight(e)\n            }); });\n        });\n        return exports.isNone(o)\n            ? F.of({\n                left: exports.none,\n                right: exports.none\n            })\n            : o.value;\n    }; },\n    throwError: function () { return exports.none; },\n    fromEither: exports.fromEither,\n    fromOption: function_1.identity\n};\n//\n// backporting\n//\n/**\n * Returns an `L` value if possible\n *\n * @since 1.19.0\n */\nfunction getLeft(ma) {\n    return ma._tag === 'Right' ? exports.none : exports.some(ma.value);\n}\nexports.getLeft = getLeft;\n/**\n * Returns an `A` value if possible\n *\n * @since 1.19.0\n */\nfunction getRight(ma) {\n    return ma._tag === 'Left' ? exports.none : exports.some(ma.value);\n}\nexports.getRight = getRight;\n/**\n * @since 1.19.0\n */\nfunction fold(onNone, onSome) {\n    return function (ma) { return ma.foldL(onNone, onSome); };\n}\nexports.fold = fold;\n/**\n * @since 1.19.0\n */\nfunction toNullable(ma) {\n    return ma.toNullable();\n}\nexports.toNullable = toNullable;\n/**\n * @since 1.19.0\n */\nfunction toUndefined(ma) {\n    return ma.toUndefined();\n}\nexports.toUndefined = toUndefined;\n/**\n * @since 1.19.0\n */\nfunction getOrElse(f) {\n    return function (ma) { return ma.getOrElseL(f); };\n}\nexports.getOrElse = getOrElse;\n/**\n * @since 1.19.0\n */\nfunction elem(E) {\n    return function (a) { return function (ma) { return ma.contains(E, a); }; };\n}\nexports.elem = elem;\n/**\n * @since 1.19.0\n */\nfunction exists(predicate) {\n    return function (ma) { return ma.exists(predicate); };\n}\nexports.exists = exists;\n/**\n * @since 1.19.0\n */\nfunction mapNullable(f) {\n    return function (ma) { return ma.mapNullable(f); };\n}\nexports.mapNullable = mapNullable;\nvar _a = pipeable_1.pipeable(exports.option), alt = _a.alt, ap = _a.ap, apFirst = _a.apFirst, apSecond = _a.apSecond, chain = _a.chain, chainFirst = _a.chainFirst, duplicate = _a.duplicate, extend = _a.extend, filter = _a.filter, filterMap = _a.filterMap, flatten = _a.flatten, foldMap = _a.foldMap, map = _a.map, partition = _a.partition, partitionMap = _a.partitionMap, reduce = _a.reduce, reduceRight = _a.reduceRight, compact = _a.compact, separate = _a.separate;\nexports.alt = alt;\nexports.ap = ap;\nexports.apFirst = apFirst;\nexports.apSecond = apSecond;\nexports.chain = chain;\nexports.chainFirst = chainFirst;\nexports.duplicate = duplicate;\nexports.extend = extend;\nexports.filter = filter;\nexports.filterMap = filterMap;\nexports.flatten = flatten;\nexports.foldMap = foldMap;\nexports.map = map;\nexports.partition = partition;\nexports.partitionMap = partitionMap;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.compact = compact;\nexports.separate = separate;\n"],"mappings":"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CA;AACAb,OAAO,CAACiE,cAAc,GAAG,UAAUC,CAAC,EAAE;EAClC,OAAOjF,QAAQ,CAAC,CAAC,CAAC,EAAEe,OAAO,CAAC+D,iBAAiB,CAACG,CAAC,CAAC,EAAE;IAAEC,KAAK,EAAEnE,OAAO,CAAC8D,IAAI,CAACI,CAAC,CAACC,KAAK;EAAE,CAAC,CAAC;AACvF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnE,OAAO,CAACoE,cAAc,GAAG,YAAY;EACjC,OAAO;IACHJ,MAAM,EAAEhE,OAAO,CAACqE,MAAM,CAAC/C,GAAG;IAC1B6C,KAAK,EAAEnE,OAAO,CAACa;EACnB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,OAAO,CAACsE,aAAa,GAAG,YAAY;EAChC,OAAOlE,QAAQ,CAACmE,aAAa,CAACvE,OAAO,CAACoE,cAAc,EAAE,CAAC;AAC3D,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApE,OAAO,CAACwE,SAAS,GAAG,UAAUtB,CAAC,EAAE;EAC7B,OAAO;IACHc,MAAM,EAAE,UAAUR,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAQD,CAAC,CAAChB,MAAM,EAAE,GAAGiB,CAAC,GAAGA,CAAC,CAACjB,MAAM,EAAE,GAAGgB,CAAC,GAAGxD,OAAO,CAAC8D,IAAI,CAACZ,CAAC,CAACc,MAAM,CAACR,CAAC,CAACvD,KAAK,EAAEwD,CAAC,CAACxD,KAAK,CAAC,CAAC;IAAG,CAAC;IAChHkE,KAAK,EAAEnE,OAAO,CAACa;EACnB,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}