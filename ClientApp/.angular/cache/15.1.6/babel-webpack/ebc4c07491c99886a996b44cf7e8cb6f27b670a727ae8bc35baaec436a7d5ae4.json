{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../sub-task-service/sub-task.service\";\nexport class TaskService {\n  constructor(http_client, sub_task_service) {\n    this.http_client = http_client;\n    this.sub_task_service = sub_task_service;\n    this.task_url = \"http://localhost:5157/api/Task\";\n  }\n  getTaskList() {\n    return this.http_client.get(this.task_url);\n  }\n  getOneTask(id) {\n    let temp_url = this.task_url + `/${id}`;\n    return this.http_client.get(temp_url);\n  }\n  createTask(new_task) {\n    new_task.id = '';\n    return this.http_client.post(this.task_url, new_task);\n  }\n  deleteTask(id, flag) {\n    let temp_url = this.task_url + `/${id}` + `?flag=${flag}`;\n    if (!flag) {}\n    console.log(temp_url);\n    return this.http_client.delete(temp_url);\n  }\n  updateTask(update_task) {\n    let temp_url = this.task_url + `/${update_task.id}`;\n    return this.http_client.put(temp_url, update_task);\n  }\n}\nTaskService.ɵfac = function TaskService_Factory(t) {\n  return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SubTaskService));\n};\nTaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TaskService,\n  factory: TaskService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,WAAuB,EAAUC,gBAAgC;IAAjE,gBAAW,GAAXD,WAAW;IAAsB,qBAAgB,GAAhBC,gBAAgB;IAFpD,aAAQ,GAAG,gCAAgC;EAE6B;EAEzFC,WAAW;IACT,OAAO,IAAI,CAACF,WAAW,CAACG,GAAG,CAAS,IAAI,CAACC,QAAQ,CAAC;EACpD;EAEAC,UAAU,CAACC,EAAiB;IAC1B,IAAIC,QAAQ,GAAG,IAAI,CAACH,QAAQ,GAAG,IAAIE,EAAE,EAAE;IAEvC,OAAO,IAAI,CAACN,WAAW,CAACG,GAAG,CAAOI,QAAQ,CAAC;EAC7C;EAEAC,UAAU,CAACC,QAAc;IACvBA,QAAQ,CAACH,EAAE,GAAG,EAAE;IAChB,OAAO,IAAI,CAACN,WAAW,CAACU,IAAI,CAAO,IAAI,CAACN,QAAQ,EAAEK,QAAQ,CAAC;EAC7D;EAEAE,UAAU,CAACL,EAAU,EAAEM,IAAa;IAClC,IAAIL,QAAQ,GAAG,IAAI,CAACH,QAAQ,GAAG,IAAIE,EAAE,EAAE,GAAG,SAASM,IAAI,EAAE;IAEzD,IAAG,CAACA,IAAI,EAAE;IAIVC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;IAErB,OAAO,IAAI,CAACP,WAAW,CAACe,MAAM,CAAOR,QAAQ,CAAC;EAChD;EAEAS,UAAU,CAACC,WAAiB;IAC1B,IAAIV,QAAQ,GAAG,IAAI,CAACH,QAAQ,GAAG,IAAIa,WAAW,CAACX,EAAE,EAAE;IAEnD,OAAO,IAAI,CAACN,WAAW,CAACkB,GAAG,CAAOX,QAAQ,EAAEU,WAAW,CAAC;EAC1D;;AArCWnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["TaskService","constructor","http_client","sub_task_service","getTaskList","get","task_url","getOneTask","id","temp_url","createTask","new_task","post","deleteTask","flag","console","log","delete","updateTask","update_task","put","factory","providedIn"],"sourceRoot":"","sources":["E:\\.NetCoreApp\\MondayApp\\ClientApp\\src\\services\\task-service\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Task } from '../../app/task';\r\nimport { Observable } from 'rxjs';\r\nimport { SubTaskService } from '../sub-task-service/sub-task.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n\r\n  private readonly task_url = \"http://localhost:5157/api/Task\";\r\n\r\n  constructor(private http_client: HttpClient, private sub_task_service: SubTaskService) { }\r\n\r\n  getTaskList(): Observable<Task[]> {\r\n    return this.http_client.get<Task[]>(this.task_url);\r\n  }\r\n\r\n  getOneTask(id: string | null): Observable<Task> {\r\n    let temp_url = this.task_url + `/${id}`;\r\n\r\n    return this.http_client.get<Task>(temp_url);\r\n  }\r\n\r\n  createTask(new_task: Task): Observable<Task> {\r\n    new_task.id = '';\r\n    return this.http_client.post<Task>(this.task_url, new_task);\r\n  }\r\n\r\n  deleteTask(id: string, flag: boolean): Observable<Task> {\r\n    let temp_url = this.task_url + `/${id}` + `?flag=${flag}`;\r\n    \r\n    if(!flag) {\r\n\r\n    }\r\n\r\n    console.log(temp_url);\r\n\r\n    return this.http_client.delete<Task>(temp_url);\r\n  }\r\n\r\n  updateTask(update_task: Task): Observable<Task> {\r\n    let temp_url = this.task_url + `/${update_task.id}`;\r\n\r\n    return this.http_client.put<Task>(temp_url, update_task);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}