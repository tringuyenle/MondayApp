{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../group-task-service/group-task.service\";\nexport class GroupTaskListService {\n  constructor(group_task_service) {\n    this.group_task_service = group_task_service;\n    this.group_task_list = [];\n  }\n  getGroupTaskList() {\n    this.group_task_service.getGroupTaskList().subscribe(data => {\n      this.group_task_list = data;\n    });\n  }\n  reloadList() {\n    this.getGroupTaskList();\n  }\n  deleteGroupTask(group_task) {\n    if (confirm(`Are you sure to delete`)) ;\n  }\n}\nGroupTaskListService.ɵfac = function GroupTaskListService_Factory(t) {\n  return new (t || GroupTaskListService)(i0.ɵɵinject(i1.GroupTaskService));\n};\nGroupTaskListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupTaskListService,\n  factory: GroupTaskListService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,oBAAoB;EAI/BC,YAAoBC,kBAAoC;IAApC,uBAAkB,GAAlBA,kBAAkB;IAFtC,oBAAe,GAAgB,EAAE;EAE2B;EAE5DC,gBAAgB;IACd,IAAI,CAACD,kBAAkB,CAACC,gBAAgB,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MAC1D,IAAI,CAACC,eAAe,GAAGD,IAAI;IAC7B,CAAC,CAAC;EACJ;EAEAE,UAAU;IACR,IAAI,CAACJ,gBAAgB,EAAE;EACzB;EAEAK,eAAe,CAACC,UAAqB;IACnC,IAAGC,OAAO,CAAC,wBAAwB,CAAC,EACtC;EAAA;;AAlBWV,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAW,SAApBX,oBAAoB;EAAAY,YAFnB;AAAM","names":["GroupTaskListService","constructor","group_task_service","getGroupTaskList","subscribe","data","group_task_list","reloadList","deleteGroupTask","group_task","confirm","factory","providedIn"],"sourceRoot":"","sources":["E:\\.NetCoreApp\\MondayApp\\ClientApp\\src\\services\\group-task-list-service\\group-task-list.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Grouptask } from 'src/app/grouptask';\r\nimport { GroupTaskService } from '../group-task-service/group-task.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupTaskListService {\r\n\r\n  group_task_list: Grouptask[] = [];\r\n\r\n  constructor(private group_task_service: GroupTaskService) { }\r\n\r\n  getGroupTaskList() {\r\n    this.group_task_service.getGroupTaskList().subscribe(data => {\r\n      this.group_task_list = data;\r\n    });\r\n  }\r\n\r\n  reloadList() {\r\n    this.getGroupTaskList();\r\n  }\r\n\r\n  deleteGroupTask(group_task: Grouptask) {\r\n    if(confirm(`Are you sure to delete`))\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}