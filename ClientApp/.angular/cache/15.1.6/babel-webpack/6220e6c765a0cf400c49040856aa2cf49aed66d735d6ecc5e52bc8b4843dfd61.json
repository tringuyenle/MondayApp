{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../group-task-service/group-task.service\";\nimport * as i2 from \"../task-service/task.service\";\nexport class GroupTaskListService {\n  constructor(group_task_service, task_service, group_task_list_service) {\n    this.group_task_service = group_task_service;\n    this.task_service = task_service;\n    this.group_task_list_service = group_task_list_service;\n    this.group_task_list = [];\n  }\n  getGroupTaskList() {\n    this.group_task_service.getGroupTaskList().subscribe(data => {\n      this.group_task_list = data;\n    });\n  }\n  reloadList() {\n    this.getGroupTaskList();\n  }\n  deleteGroupTask(group_task) {\n    if (confirm(`Are you sure to delete Group Task: ${group_task.name}`)) {\n      this.task_service.deleteTask(group_task.id, false).subscribe({\n        error: () => console.log(\"Delete all task!\")\n      });\n      this.group_task_service.deleteGroupTask(group_task.id).subscribe({\n        error: () => {\n          console.log(\"Delete group task\");\n        }\n      });\n    }\n  }\n}\nGroupTaskListService.ɵfac = function GroupTaskListService_Factory(t) {\n  return new (t || GroupTaskListService)(i0.ɵɵinject(i1.GroupTaskService), i0.ɵɵinject(i2.TaskService), i0.ɵɵinject(GroupTaskListService));\n};\nGroupTaskListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupTaskListService,\n  factory: GroupTaskListService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,oBAAoB;EAI/BC,YAAoBC,kBAAoC,EAAUC,YAAyB,EACvEC,uBAA6C;IAD7C,uBAAkB,GAAlBF,kBAAkB;IAA4B,iBAAY,GAAZC,YAAY;IAC1D,4BAAuB,GAAvBC,uBAAuB;IAH3C,oBAAe,GAAgB,EAAE;EAGoC;EAErEC,gBAAgB;IACd,IAAI,CAACH,kBAAkB,CAACG,gBAAgB,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MAC1D,IAAI,CAACC,eAAe,GAAGD,IAAI;IAC7B,CAAC,CAAC;EACJ;EAEAE,UAAU;IACR,IAAI,CAACJ,gBAAgB,EAAE;EACzB;EAEAK,eAAe,CAACC,UAAqB;IACnC,IAAGC,OAAO,CAAC,sCAAsCD,UAAU,CAACE,IAAI,EAAE,CAAC,EAAE;MACnE,IAAI,CAACV,YAAY,CAACW,UAAU,CAACH,UAAU,CAACI,EAAE,EAAE,KAAK,CAAC,CAACT,SAAS,CAAC;QAC3DU,KAAK,EAAE,MAAMC,OAAO,CAACC,GAAG,CAAC,kBAAkB;OAC5C,CAAC;MAEF,IAAI,CAAChB,kBAAkB,CAACQ,eAAe,CAACC,UAAU,CAACI,EAAE,CAAC,CAACT,SAAS,CAAC;QAC/DU,KAAK,EAAE,MAAK;UACVC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAElC;OACD,CAAC;;EAIN;;AAhCWlB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAmB,SAApBnB,oBAAoB;EAAAoB,YAFnB;AAAM","names":["GroupTaskListService","constructor","group_task_service","task_service","group_task_list_service","getGroupTaskList","subscribe","data","group_task_list","reloadList","deleteGroupTask","group_task","confirm","name","deleteTask","id","error","console","log","factory","providedIn"],"sourceRoot":"","sources":["E:\\.NetCoreApp\\MondayApp\\ClientApp\\src\\services\\group-task-list-service\\group-task-list.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Grouptask } from 'src/app/grouptask';\r\nimport { GroupTaskService } from '../group-task-service/group-task.service';\r\nimport { TaskService } from '../task-service/task.service';\r\nimport { Group}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupTaskListService {\r\n\r\n  group_task_list: Grouptask[] = [];\r\n\r\n  constructor(private group_task_service: GroupTaskService, private task_service: TaskService, \r\n              private group_task_list_service: GroupTaskListService) { }\r\n\r\n  getGroupTaskList() {\r\n    this.group_task_service.getGroupTaskList().subscribe(data => {\r\n      this.group_task_list = data;\r\n    });\r\n  }\r\n\r\n  reloadList() {\r\n    this.getGroupTaskList();\r\n  }\r\n\r\n  deleteGroupTask(group_task: Grouptask) {\r\n    if(confirm(`Are you sure to delete Group Task: ${group_task.name}`)) {\r\n      this.task_service.deleteTask(group_task.id, false).subscribe({\r\n        error: () => console.log(\"Delete all task!\")\r\n      });\r\n\r\n      this.group_task_service.deleteGroupTask(group_task.id).subscribe({\r\n        error: () => {\r\n          console.log(\"Delete group task\");\r\n\r\n        }\r\n      })\r\n\r\n\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}