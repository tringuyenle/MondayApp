{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../group-task-service/group-task.service\";\nimport * as i2 from \"../task-service/task.service\";\nimport * as i3 from \"../sub-task-service/sub-task.service\";\nexport class GroupTaskListService {\n  constructor(group_task_service, task_service, sub_task_service) {\n    this.group_task_service = group_task_service;\n    this.task_service = task_service;\n    this.sub_task_service = sub_task_service;\n    this.group_task_list = [];\n    this.delete_task_list = [];\n  }\n  getGroupTaskList() {\n    this.group_task_service.getGroupTaskList().subscribe(data => {\n      this.group_task_list = data;\n      this.first_group = data[0];\n    });\n  }\n  reloadList() {\n    this.getGroupTaskList();\n  }\n  deleteGroupTask(group_task) {\n    if (confirm(`Are you sure to delete Group Task: ${group_task.name}`)) {\n      // this.task_service.deleteTask(group_task.id, false).subscribe({\n      //   error: () => console.log(\"Delete all task!\")\n      // });\n      this.task_service.getTaskList().subscribe(data => {\n        this.delete_task_list = data;\n      });\n      for (var delete_task of this.delete_task_list) {\n        this.sub_task_service.deleteSubTask(delete_task.id, false);\n        this.task_service.deleteTask();\n      }\n      this.group_task_service.deleteGroupTask(group_task.id).subscribe({\n        error: () => {\n          console.log(\"Delete group task\");\n          this.reloadList();\n        }\n      });\n    }\n  }\n}\nGroupTaskListService.ɵfac = function GroupTaskListService_Factory(t) {\n  return new (t || GroupTaskListService)(i0.ɵɵinject(i1.GroupTaskService), i0.ɵɵinject(i2.TaskService), i0.ɵɵinject(i3.SubTaskService));\n};\nGroupTaskListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupTaskListService,\n  factory: GroupTaskListService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAUA,OAAM,MAAOA,oBAAoB;EAM/BC,YAAoBC,kBAAoC,EAAUC,YAAyB,EACvEC,gBAAgC;IADhC,uBAAkB,GAAlBF,kBAAkB;IAA4B,iBAAY,GAAZC,YAAY;IAC1D,qBAAgB,GAAhBC,gBAAgB;IALpC,oBAAe,GAAgB,EAAE;IACjC,qBAAgB,GAAW,EAAE;EAI2B;EAExDC,gBAAgB;IACd,IAAI,CAACH,kBAAkB,CAACG,gBAAgB,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MAC1D,IAAI,CAACC,eAAe,GAAGD,IAAI;MAC3B,IAAI,CAACE,WAAW,GAAGF,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC;EACJ;EAEAG,UAAU;IACR,IAAI,CAACL,gBAAgB,EAAE;EACzB;EAEAM,eAAe,CAACC,UAAqB;IACnC,IAAGC,OAAO,CAAC,sCAAsCD,UAAU,CAACE,IAAI,EAAE,CAAC,EAAE;MACnE;MACA;MACA;MAEA,IAAI,CAACX,YAAY,CAACY,WAAW,EAAE,CAACT,SAAS,CAACC,IAAI,IAAG;QAC/C,IAAI,CAACS,gBAAgB,GAAGT,IAAI;MAC9B,CAAC,CAAC;MAEF,KAAI,IAAIU,WAAW,IAAI,IAAI,CAACD,gBAAgB,EAAE;QAC5C,IAAI,CAACZ,gBAAgB,CAACc,aAAa,CAACD,WAAW,CAACE,EAAE,EAAE,KAAK,CAAC;QAC1D,IAAI,CAAChB,YAAY,CAACiB,UAAU,EAAE;;MAGhC,IAAI,CAAClB,kBAAkB,CAACS,eAAe,CAACC,UAAU,CAACO,EAAE,CAAC,CAACb,SAAS,CAAC;QAC/De,KAAK,EAAE,MAAK;UACVC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;UAChC,IAAI,CAACb,UAAU,EAAE;QACnB;OACD,CAAC;;EAEN;;AA1CWV,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAwB,SAApBxB,oBAAoB;EAAAyB,YAFnB;AAAM","names":["GroupTaskListService","constructor","group_task_service","task_service","sub_task_service","getGroupTaskList","subscribe","data","group_task_list","first_group","reloadList","deleteGroupTask","group_task","confirm","name","getTaskList","delete_task_list","delete_task","deleteSubTask","id","deleteTask","error","console","log","factory","providedIn"],"sourceRoot":"","sources":["E:\\.NetCoreApp\\MondayApp\\ClientApp\\src\\services\\group-task-list-service\\group-task-list.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Grouptask } from 'src/app/grouptask';\r\nimport { GroupTaskService } from '../group-task-service/group-task.service';\r\nimport { TaskService } from '../task-service/task.service';\r\nimport { Task } from 'src/app/task';\r\nimport { SubTaskService } from '../sub-task-service/sub-task.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupTaskListService {\r\n\r\n  group_task_list: Grouptask[] = [];\r\n  delete_task_list: Task[] = [];\r\n  first_group!: Grouptask;\r\n\r\n  constructor(private group_task_service: GroupTaskService, private task_service: TaskService,\r\n              private sub_task_service: SubTaskService) { }\r\n\r\n  getGroupTaskList() {\r\n    this.group_task_service.getGroupTaskList().subscribe(data => {\r\n      this.group_task_list = data;\r\n      this.first_group = data[0];\r\n    });\r\n  }\r\n\r\n  reloadList() {\r\n    this.getGroupTaskList();\r\n  }\r\n\r\n  deleteGroupTask(group_task: Grouptask) {\r\n    if(confirm(`Are you sure to delete Group Task: ${group_task.name}`)) {\r\n      // this.task_service.deleteTask(group_task.id, false).subscribe({\r\n      //   error: () => console.log(\"Delete all task!\")\r\n      // });\r\n\r\n      this.task_service.getTaskList().subscribe(data => {\r\n        this.delete_task_list = data;\r\n      })\r\n\r\n      for(var delete_task of this.delete_task_list) {\r\n        this.sub_task_service.deleteSubTask(delete_task.id, false);\r\n        this.task_service.deleteTask()\r\n      }\r\n\r\n      this.group_task_service.deleteGroupTask(group_task.id).subscribe({\r\n        error: () => {\r\n          console.log(\"Delete group task\");\r\n          this.reloadList();\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}