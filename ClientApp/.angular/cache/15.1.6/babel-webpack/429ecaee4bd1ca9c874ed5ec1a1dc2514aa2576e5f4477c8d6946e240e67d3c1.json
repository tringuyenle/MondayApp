{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { __decorate, __metadata } from 'tslib';\nimport { some, none } from 'fp-ts/lib/Option';\nimport { MatTableDataSource } from '@angular/material';\nimport { Injectable, defineInjectable, inject, Component, ElementRef, Input, Output, NgModule } from '@angular/core';\nimport { cloneDeep, isEmpty, xor, flatMap, defaults } from 'lodash-es';\nimport { Subject } from 'rxjs';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/table';\nimport * as ɵngcc3 from '@angular/material/icon';\nconst _c0 = function (a0) {\n  return {\n    \"vertical-separator\": a0\n  };\n};\nfunction TreetableComponent_div_1_th_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 7);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"titlecase\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const column_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r5.options.verticalSeparator));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r5.options.capitalisedHeader ? ɵngcc0.ɵɵpipeBind1(2, 2, column_r3) : column_r3, \" \");\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"visibility\": a0\n  };\n};\nfunction TreetableComponent_div_1_td_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\")(1, \"div\", 10);\n    ɵngcc0.ɵɵelement(2, \"div\", 11);\n    ɵngcc0.ɵɵelementStart(3, \"mat-icon\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function TreetableComponent_div_1_td_3_div_1_Template_mat_icon_click_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const element_r8 = ɵngcc0.ɵɵnextContext().$implicit;\n      const ctx_r11 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r11.onNodeClick(element_r8));\n    });\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\");\n    ɵngcc0.ɵɵtext(6);\n    ɵngcc0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const element_r8 = ɵngcc0.ɵɵnextContext().$implicit;\n    const column_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r9 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r9.formatIndentation(element_r8), ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(4, _c1, element_r8.children.length ? \"visible\" : \"hidden\"));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", element_r8.isExpanded ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\", \" \");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(element_r8.value[column_r3]);\n  }\n}\nfunction TreetableComponent_div_1_td_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r8 = ɵngcc0.ɵɵnextContext().$implicit;\n    const column_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", element_r8.value[column_r3], \" \");\n  }\n}\nfunction TreetableComponent_div_1_td_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 8);\n    ɵngcc0.ɵɵtemplate(1, TreetableComponent_div_1_td_3_div_1_Template, 7, 6, \"div\", 9);\n    ɵngcc0.ɵɵtemplate(2, TreetableComponent_div_1_td_3_div_2_Template, 2, 1, \"div\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const isFirst_r4 = ɵngcc0.ɵɵnextContext().first;\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r6.options.verticalSeparator));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", isFirst_r4);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !isFirst_r4);\n  }\n}\nfunction TreetableComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelementContainerStart(1, 4);\n    ɵngcc0.ɵɵtemplate(2, TreetableComponent_div_1_th_2_Template, 3, 6, \"th\", 5);\n    ɵngcc0.ɵɵtemplate(3, TreetableComponent_div_1_td_3_Template, 3, 5, \"td\", 6);\n    ɵngcc0.ɵɵelementContainerEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const column_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵpropertyInterpolate(\"matColumnDef\", column_r3);\n  }\n}\nfunction TreetableComponent_tr_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tr\", 13);\n  }\n}\nconst _c2 = function (a0) {\n  return {\n    \"highlight-on-hover\": a0\n  };\n};\nfunction TreetableComponent_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tr\", 14);\n  }\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(1, _c2, ctx_r2.options.highlightRowOnHover));\n  }\n}\nclass TreeService {\n  /**\r\n   * Traverse a tree data structure and applies the provided \\@param f function\r\n   * to all nodes\r\n   * @template T, K\r\n   * @param {?} root the tree to be traversed\r\n   * @param {?} f the function to be applied to all nodes\r\n   * N.B. this function modifies the existing tree\r\n   * @return {?}\r\n   */\n  traverse(root, f) {\n    this._traverse(root, node => {\n      f(node);\n      return true;\n    });\n  }\n  /**\r\n   * Search a tree for a node with the provided \\@param id\r\n   * @template T, K\r\n   * @param {?} root the tree to be searched\r\n   * @param {?} id the id of the node to be retrieved\r\n   * @return {?}\r\n   */\n  searchById(root, id) {\n    /** @type {?} */\n    let matchingNode;\n    /** @type {?} */\n    const pathToRoot = {};\n    this._traverse(root, node => {\n      node.children.forEach(child => {\n        pathToRoot[child.id] = node;\n      });\n      if (node.id === id) {\n        matchingNode = node;\n      }\n      return node.id !== id;\n    });\n    return matchingNode ? some({\n      id: matchingNode.id,\n      value: matchingNode.value,\n      children: matchingNode.children,\n      pathToRoot: this.buildPath(id, pathToRoot)\n    }) : none;\n  }\n  /**\r\n   * Internal function that can be used to traverse or search the tree\r\n   * @template T, K\r\n   * @param {?} root the tree to be scanned\r\n   * @param {?} f an optional function to be applied to all nodes\r\n   * @return {?}\r\n   */\n  _traverse(root, f) {\n    if (!f(root)) {\n      return;\n    }\n    root.children.forEach(c => this._traverse(c, f));\n  }\n  /**\r\n   * Given a \\@param root tree and a \\@param node node, calculate the\r\n   * depth of the node in the tree\r\n   * @template T, K\r\n   * @param {?} root the tree\r\n   * @param {?} node the node we want to calculate the depth of\r\n   * @return {?}\r\n   */\n  getNodeDepth(root, node) {\n    return this.searchById(root, node.id).fold(-1, n => n.pathToRoot.length);\n  }\n  /**\r\n   * Flatten a \\@param root tree into a list of its nodes\r\n   * @template T, K\r\n   * @param {?} root the tree to be flattened\r\n   * @return {?}\r\n   */\n  flatten(root) {\n    /** @type {?} */\n    const result = [cloneDeep(root)];\n    for (let i = 0; i < result.length; i++) {\n      /** @type {?} */\n      const node = result[i];\n      if (node.children) {\n        result.splice(result.indexOf(node) + 1, 0, ... /** @type {?} */node.children);\n      }\n    }\n    return result;\n  }\n  /**\r\n   * Internal function used to build the pathToRoot of a node in a tree\r\n   * @template T, K\r\n   * @param {?} id the id of the node\r\n   * @param {?} pathMap the pathMap returned by searchById\r\n   * @return {?}\r\n   */\n  buildPath(id, pathMap) {\n    /** @type {?} */\n    const pathToRoot = [];\n    /** @type {?} */\n    let key = id;\n    while (key) {\n      if (pathMap[key]) {\n        pathToRoot.push(pathMap[key]);\n        key = pathMap[key].id;\n      } else {\n        key = null;\n      }\n    }\n    return pathToRoot;\n  }\n}\nTreeService.ɵfac = function TreeService_Factory(t) {\n  return new (t || TreeService)();\n};\nTreeService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: TreeService,\n  factory: TreeService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nTreeService.ngInjectableDef = defineInjectable({\n  factory: function TreeService_Factory() {\n    return new TreeService();\n  },\n  token: TreeService,\n  providedIn: \"root\"\n});\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\nclass ValidatorService {\n  /**\r\n   * @template T, K\r\n   * @param {?} node\r\n   * @param {?} customColumnOrder\r\n   * @return {?}\r\n   */\n  validateCustomOrder(node, customColumnOrder) {\n    /** @type {?} */\n    const xorN = xor(Object.keys(node.value), customColumnOrder);\n    return {\n      valid: isEmpty(xorN),\n      xor: xorN\n    };\n  }\n}\nValidatorService.ɵfac = function ValidatorService_Factory(t) {\n  return new (t || ValidatorService)();\n};\nValidatorService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ValidatorService,\n  factory: ValidatorService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nValidatorService.ngInjectableDef = defineInjectable({\n  factory: function ValidatorService_Factory() {\n    return new ValidatorService();\n  },\n  token: ValidatorService,\n  providedIn: \"root\"\n});\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n/** @type {?} */\nconst uuidv4 = require('uuid/v4');\nclass ConverterService {\n  /**\r\n   * @param {?} treeService\r\n   */\n  constructor(treeService) {\n    this.treeService = treeService;\n  }\n  /**\r\n   * Clone a Node<T> object and convert it to a SearchableNode<T>\r\n   * @template T\r\n   * @param {?} tree the node to be converted\r\n   * @return {?}\r\n   */\n  toSearchableTree(tree) {\n    /** @type {?} */\n    const treeClone = /** @type {?} */cloneDeep(tree);\n    this.treeService.traverse(treeClone, node => {\n      node.id = node.id ? node.id : uuidv4();\n    });\n    return treeClone;\n  }\n  /**\r\n   * Clone a SearchableNode<T> object and convert it to a TreeTableNode<T>\r\n   * @template T\r\n   * @param {?} tree the node to be converted\r\n   * @return {?}\r\n   */\n  toTreeTableTree(tree) {\n    /** @type {?} */\n    const treeClone = /** @type {?} */cloneDeep(tree);\n    this.treeService.traverse(treeClone, node => {\n      node.depth = this.treeService.getNodeDepth(treeClone, node);\n      node.isExpanded = true;\n      node.isVisible = true;\n    });\n    return treeClone;\n  }\n}\nConverterService.ɵfac = function ConverterService_Factory(t) {\n  return new (t || ConverterService)(ɵngcc0.ɵɵinject(TreeService));\n};\nConverterService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ConverterService,\n  factory: ConverterService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nConverterService.ctorParameters = () => [{\n  type: TreeService\n}];\n/** @nocollapse */\nConverterService.ngInjectableDef = defineInjectable({\n  factory: function ConverterService_Factory() {\n    return new ConverterService(inject(TreeService));\n  },\n  token: ConverterService,\n  providedIn: \"root\"\n});\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n/** @type {?} */\nconst defaultOptions = {\n  verticalSeparator: true,\n  highlightRowOnHover: true,\n  elevation: 5\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n/**\r\n * Decorator that sets an Input() propertiy as required, will\r\n * throw an error if the property is not specified in the template.\r\n * I.e. \\@Input() \\@Required myProp: number;\r\n * @param {?} target\r\n * @param {?} property\r\n * @return {?}\r\n */\nfunction Required(target, property) {\n  Object.defineProperty(target, property, {\n    /**\r\n     * @return {?}\r\n     */\n    get() {\n      throw new Error(`Input '${property}' is required. Have you forgotten to add [${property}] = ... in your template?`);\n    },\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\n    set(value) {\n      Object.defineProperty(target, property, {\n        value,\n        writable: true,\n        configurable: true\n      });\n    }\n  });\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n/**\r\n * @template T\r\n */\nclass TreetableComponent {\n  /**\r\n   * @param {?} treeService\r\n   * @param {?} validatorService\r\n   * @param {?} converterService\r\n   * @param {?} elem\r\n   */\n  constructor(treeService, validatorService, converterService, elem) {\n    this.treeService = treeService;\n    this.validatorService = validatorService;\n    this.converterService = converterService;\n    this.options = {};\n    this.nodeClicked = new Subject();\n    /** @type {?} */\n    const tagName = elem.nativeElement.tagName.toLowerCase();\n    if (tagName === 'ng-treetable') {\n      console.warn(`DEPRECATION WARNING: \\n The 'ng-treetable' selector is being deprecated. Please use the new 'treetable' selector`);\n    }\n  }\n  /**\r\n   * @return {?}\r\n   */\n  ngOnInit() {\n    this.tree = Array.isArray(this.tree) ? this.tree : [this.tree];\n    this.options = this.parseOptions(defaultOptions);\n    /** @type {?} */\n    const customOrderValidator = this.validatorService.validateCustomOrder(this.tree[0], this.options.customColumnOrder);\n    if (this.options.customColumnOrder && !customOrderValidator.valid) {\n      throw new Error(`\n        Properties ${customOrderValidator.xor.map(x => `'${x}'`).join(', ')} incorrect or missing in customColumnOrder`);\n    }\n    this.displayedColumns = this.options.customColumnOrder ? this.options.customColumnOrder : this.extractNodeProps(this.tree[0]);\n    this.searchableTree = this.tree.map(t => this.converterService.toSearchableTree(t));\n    /** @type {?} */\n    const treeTableTree = this.searchableTree.map(st => this.converterService.toTreeTableTree(st));\n    this.treeTable = flatMap(treeTableTree, this.treeService.flatten);\n    this.dataSource = this.generateDataSource();\n  }\n  /**\r\n   * @param {?} tree\r\n   * @return {?}\r\n   */\n  extractNodeProps(tree) {\n    return Object.keys(tree.value).filter(x => typeof tree.value[x] !== 'object');\n  }\n  /**\r\n   * @return {?}\r\n   */\n  generateDataSource() {\n    return new MatTableDataSource(this.treeTable.filter(x => x.isVisible));\n  }\n  /**\r\n   * @param {?} node\r\n   * @param {?=} step\r\n   * @return {?}\r\n   */\n  formatIndentation(node, step = 5) {\n    return '&nbsp;'.repeat(node.depth * step);\n  }\n  /**\r\n   * @return {?}\r\n   */\n  formatElevation() {\n    return `mat-elevation-z${this.options.elevation}`;\n  }\n  /**\r\n   * @param {?} clickedNode\r\n   * @return {?}\r\n   */\n  onNodeClick(clickedNode) {\n    clickedNode.isExpanded = !clickedNode.isExpanded;\n    this.treeTable.forEach(el => {\n      el.isVisible = this.searchableTree.every(st => {\n        return this.treeService.searchById(st, el.id).fold([], n => n.pathToRoot).every(p => this.treeTable.find(x => x.id === p.id).isExpanded);\n      });\n    });\n    this.dataSource = this.generateDataSource();\n    this.nodeClicked.next(clickedNode);\n  }\n  // Overrides default options with those specified by the user\n  /**\r\n   * @param {?} defaultOpts\r\n   * @return {?}\r\n   */\n  parseOptions(defaultOpts) {\n    return defaults(this.options, defaultOpts);\n  }\n}\nTreetableComponent.ɵfac = function TreetableComponent_Factory(t) {\n  return new (t || TreetableComponent)(ɵngcc0.ɵɵdirectiveInject(TreeService), ɵngcc0.ɵɵdirectiveInject(ValidatorService), ɵngcc0.ɵɵdirectiveInject(ConverterService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nTreetableComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TreetableComponent,\n  selectors: [[\"ng-treetable\"], [\"treetable\"]],\n  inputs: {\n    options: \"options\",\n    tree: \"tree\"\n  },\n  outputs: {\n    nodeClicked: \"nodeClicked\"\n  },\n  decls: 4,\n  vars: 5,\n  consts: [[\"mat-table\", \"\", 3, \"dataSource\", \"ngClass\"], [4, \"ngFor\", \"ngForOf\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 3, \"ngClass\", 4, \"matRowDef\", \"matRowDefColumns\"], [3, \"matColumnDef\"], [\"mat-header-cell\", \"\", 3, \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\", 3, \"ngClass\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [4, \"ngIf\"], [1, \"value-cell\"], [3, \"innerHTML\"], [3, \"ngStyle\", \"click\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", 3, \"ngClass\"]],\n  template: function TreetableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n      ɵngcc0.ɵɵtemplate(1, TreetableComponent_div_1_Template, 4, 1, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(2, TreetableComponent_tr_2_Template, 1, 0, \"tr\", 2);\n      ɵngcc0.ɵɵtemplate(3, TreetableComponent_tr_3_Template, 1, 3, \"tr\", 3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"ngClass\", ctx.formatElevation());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.displayedColumns);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  dependencies: [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc2.MatTable, ɵngcc2.MatHeaderCellDef, ɵngcc2.MatHeaderRowDef, ɵngcc2.MatColumnDef, ɵngcc2.MatCellDef, ɵngcc2.MatRowDef, ɵngcc2.MatHeaderCell, ɵngcc2.MatCell, ɵngcc2.MatHeaderRow, ɵngcc2.MatRow, ɵngcc3.MatIcon, ɵngcc1.TitleCasePipe],\n  styles: [\"table[_ngcontent-%COMP%]{width:100%}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:center}mat-icon[_ngcontent-%COMP%]{cursor:pointer}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#f0f0f5}td[class*=' mat-column'][_ngcontent-%COMP%]{width:10vw;min-width:10vw;max-width:10vw}.mat-cell[_ngcontent-%COMP%], .mat-header-cell[_ngcontent-%COMP%]{padding:10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:break-all}\"]\n});\n/** @nocollapse */\nTreetableComponent.ctorParameters = () => [{\n  type: TreeService\n}, {\n  type: ValidatorService\n}, {\n  type: ConverterService\n}, {\n  type: ElementRef\n}];\nTreetableComponent.propDecorators = {\n  tree: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  nodeClicked: [{\n    type: Output\n  }]\n};\n__decorate([Required, __metadata(\"design:type\", Object)], TreetableComponent.prototype, \"tree\", void 0);\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ValidatorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConverterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: TreeService\n    }];\n  }, null);\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreetableComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-treetable, treetable',\n      template: \"<table mat-table [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"formatElevation()\\\">\\n\\n  <div *ngFor=\\\"let column of displayedColumns; first as isFirst;\\\">\\n    <ng-container matColumnDef=\\\"{{column}}\\\">\\n      <th mat-header-cell *matHeaderCellDef [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\n        {{options.capitalisedHeader ? (column | titlecase) : column}}\\n      </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\n        <div *ngIf=\\\"isFirst\\\">\\n          <div class=\\\"value-cell\\\">\\n            <div [innerHTML]=\\\"formatIndentation(element)\\\"></div>\\n            <mat-icon [ngStyle]=\\\"{'visibility': element.children.length ? 'visible' : 'hidden'}\\\" (click)=\\\"onNodeClick(element)\\\">\\n              {{element.isExpanded ? 'keyboard_arrow_down' : 'keyboard_arrow_right'}}\\n            </mat-icon>\\n            <div>{{element.value[column]}}</div>\\n          </div>\\n        </div>\\n        <div *ngIf=\\\"!isFirst\\\">\\n          {{element.value[column]}}\\n        </div>\\n      </td>\\n    </ng-container>\\n  </div>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row [ngClass]=\\\"{'highlight-on-hover': options.highlightRowOnHover}\\\" *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n</table>\\n\",\n      styles: [\"table{width:100%}.value-cell{display:flex;align-items:center}mat-icon{cursor:pointer}.highlight-on-hover:hover{background-color:#f0f0f5}td[class*=' mat-column']{width:10vw;min-width:10vw;max-width:10vw}.mat-cell,.mat-header-cell{padding:10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:break-all}\"]\n    }]\n  }], function () {\n    return [{\n      type: TreeService\n    }, {\n      type: ValidatorService\n    }, {\n      type: ConverterService\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    nodeClicked: [{\n      type: Output\n    }],\n    tree: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\nclass TreetableModule {}\nTreetableModule.ɵfac = function TreetableModule_Factory(t) {\n  return new (t || TreetableModule)();\n};\nTreetableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: TreetableModule\n});\nTreetableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule, MatTableModule, MatIconModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreetableModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TreetableComponent],\n      imports: [CommonModule, MatTableModule, MatIconModule],\n      exports: [TreetableComponent]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreetableModule, {\n    declarations: function () {\n      return [TreetableComponent];\n    },\n    imports: function () {\n      return [CommonModule, MatTableModule, MatIconModule];\n    },\n    exports: function () {\n      return [TreetableComponent];\n    }\n  });\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\nexport { TreetableModule, TreetableComponent as ɵa, Required as ɵb, ConverterService as ɵe, TreeService as ɵc, ValidatorService as ɵd };","map":{"version":3,"names":["CommonModule","MatTableModule","MatIconModule","__decorate","__metadata","some","none","MatTableDataSource","Injectable","defineInjectable","inject","Component","ElementRef","Input","Output","NgModule","cloneDeep","isEmpty","xor","flatMap","defaults","Subject","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","a0","TreetableComponent_div_1_th_2_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵpipe","ɵɵelementEnd","column_r3","ɵɵnextContext","$implicit","ctx_r5","ɵɵproperty","ɵɵpureFunction1","options","verticalSeparator","ɵɵadvance","ɵɵtextInterpolate1","capitalisedHeader","ɵɵpipeBind1","_c1","TreetableComponent_div_1_td_3_div_1_Template","_r13","ɵɵgetCurrentView","ɵɵelement","ɵɵlistener","TreetableComponent_div_1_td_3_div_1_Template_mat_icon_click_3_listener","ɵɵrestoreView","element_r8","ctx_r11","ɵɵresetView","onNodeClick","ctx_r9","formatIndentation","ɵɵsanitizeHtml","children","length","isExpanded","ɵɵtextInterpolate","value","TreetableComponent_div_1_td_3_div_2_Template","TreetableComponent_div_1_td_3_Template","ɵɵtemplate","isFirst_r4","first","ctx_r6","TreetableComponent_div_1_Template","ɵɵelementContainerStart","ɵɵelementContainerEnd","ɵɵpropertyInterpolate","TreetableComponent_tr_2_Template","_c2","TreetableComponent_tr_3_Template","ctx_r2","highlightRowOnHover","TreeService","traverse","root","f","_traverse","node","searchById","id","matchingNode","pathToRoot","forEach","child","buildPath","c","getNodeDepth","fold","n","flatten","result","i","splice","indexOf","pathMap","key","push","ɵfac","TreeService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngInjectableDef","ValidatorService","validateCustomOrder","customColumnOrder","xorN","Object","keys","valid","ValidatorService_Factory","uuidv4","require","ConverterService","constructor","treeService","toSearchableTree","tree","treeClone","toTreeTableTree","depth","isVisible","ConverterService_Factory","ɵɵinject","ctorParameters","type","defaultOptions","elevation","Required","target","property","defineProperty","get","Error","set","writable","configurable","TreetableComponent","validatorService","converterService","elem","nodeClicked","tagName","nativeElement","toLowerCase","console","warn","ngOnInit","Array","isArray","parseOptions","customOrderValidator","map","x","join","displayedColumns","extractNodeProps","searchableTree","treeTableTree","st","treeTable","dataSource","generateDataSource","filter","step","repeat","formatElevation","clickedNode","el","every","p","find","next","defaultOpts","TreetableComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","inputs","outputs","decls","vars","consts","template","TreetableComponent_Template","dependencies","NgClass","NgForOf","NgIf","NgStyle","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatRowDef","MatHeaderCell","MatCell","MatHeaderRow","MatRow","MatIcon","TitleCasePipe","styles","propDecorators","prototype","ngDevMode","ɵsetClassMetadata","args","selector","TreetableModule","TreetableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope","ɵa","ɵb","ɵe","ɵc","ɵd"],"sources":["C:/Users/DELL/source/repos/MondayApp/ClientApp/node_modules/ng-material-treetable/__ivy_ngcc__/fesm2015/ng-material-treetable.js"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { __decorate, __metadata } from 'tslib';\nimport { some, none } from 'fp-ts/lib/Option';\nimport { MatTableDataSource } from '@angular/material';\nimport { Injectable, defineInjectable, inject, Component, ElementRef, Input, Output, NgModule } from '@angular/core';\nimport { cloneDeep, isEmpty, xor, flatMap, defaults } from 'lodash-es';\nimport { Subject } from 'rxjs';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/table';\nimport * as ɵngcc3 from '@angular/material/icon';\n\nconst _c0 = function (a0) { return { \"vertical-separator\": a0 }; };\nfunction TreetableComponent_div_1_th_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 7);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"titlecase\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c0, ctx_r5.options.verticalSeparator));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r5.options.capitalisedHeader ? ɵngcc0.ɵɵpipeBind1(2, 2, column_r3) : column_r3, \" \");\n} }\nconst _c1 = function (a0) { return { \"visibility\": a0 }; };\nfunction TreetableComponent_div_1_td_3_div_1_Template(rf, ctx) { if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\")(1, \"div\", 10);\n    ɵngcc0.ɵɵelement(2, \"div\", 11);\n    ɵngcc0.ɵɵelementStart(3, \"mat-icon\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function TreetableComponent_div_1_td_3_div_1_Template_mat_icon_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r13); const element_r8 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r11.onNodeClick(element_r8)); });\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\");\n    ɵngcc0.ɵɵtext(6);\n    ɵngcc0.ɵɵelementEnd()()();\n} if (rf & 2) {\n    const element_r8 = ɵngcc0.ɵɵnextContext().$implicit;\n    const column_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r9 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r9.formatIndentation(element_r8), ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(4, _c1, element_r8.children.length ? \"visible\" : \"hidden\"));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", element_r8.isExpanded ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\", \" \");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(element_r8.value[column_r3]);\n} }\nfunction TreetableComponent_div_1_td_3_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const element_r8 = ɵngcc0.ɵɵnextContext().$implicit;\n    const column_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", element_r8.value[column_r3], \" \");\n} }\nfunction TreetableComponent_div_1_td_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 8);\n    ɵngcc0.ɵɵtemplate(1, TreetableComponent_div_1_td_3_div_1_Template, 7, 6, \"div\", 9);\n    ɵngcc0.ɵɵtemplate(2, TreetableComponent_div_1_td_3_div_2_Template, 2, 1, \"div\", 9);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const isFirst_r4 = ɵngcc0.ɵɵnextContext().first;\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r6.options.verticalSeparator));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", isFirst_r4);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !isFirst_r4);\n} }\nfunction TreetableComponent_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelementContainerStart(1, 4);\n    ɵngcc0.ɵɵtemplate(2, TreetableComponent_div_1_th_2_Template, 3, 6, \"th\", 5);\n    ɵngcc0.ɵɵtemplate(3, TreetableComponent_div_1_td_3_Template, 3, 5, \"td\", 6);\n    ɵngcc0.ɵɵelementContainerEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵpropertyInterpolate(\"matColumnDef\", column_r3);\n} }\nfunction TreetableComponent_tr_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tr\", 13);\n} }\nconst _c2 = function (a0) { return { \"highlight-on-hover\": a0 }; };\nfunction TreetableComponent_tr_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tr\", 14);\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(1, _c2, ctx_r2.options.highlightRowOnHover));\n} }\nclass TreeService {\r\n    /**\r\n     * Traverse a tree data structure and applies the provided \\@param f function\r\n     * to all nodes\r\n     * @template T, K\r\n     * @param {?} root the tree to be traversed\r\n     * @param {?} f the function to be applied to all nodes\r\n     * N.B. this function modifies the existing tree\r\n     * @return {?}\r\n     */\r\n    traverse(root, f) {\r\n        this._traverse(root, (node) => {\r\n            f(node);\r\n            return true;\r\n        });\r\n    }\r\n    /**\r\n     * Search a tree for a node with the provided \\@param id\r\n     * @template T, K\r\n     * @param {?} root the tree to be searched\r\n     * @param {?} id the id of the node to be retrieved\r\n     * @return {?}\r\n     */\r\n    searchById(root, id) {\r\n        /** @type {?} */\r\n        let matchingNode;\r\n        /** @type {?} */\r\n        const pathToRoot = {};\r\n        this._traverse(root, (node) => {\r\n            node.children.forEach(child => {\r\n                pathToRoot[child.id] = node;\r\n            });\r\n            if (node.id === id) {\r\n                matchingNode = node;\r\n            }\r\n            return node.id !== id;\r\n        });\r\n        return matchingNode ? some({\r\n            id: matchingNode.id,\r\n            value: matchingNode.value,\r\n            children: matchingNode.children,\r\n            pathToRoot: this.buildPath(id, pathToRoot)\r\n        }) : none;\r\n    }\r\n    /**\r\n     * Internal function that can be used to traverse or search the tree\r\n     * @template T, K\r\n     * @param {?} root the tree to be scanned\r\n     * @param {?} f an optional function to be applied to all nodes\r\n     * @return {?}\r\n     */\r\n    _traverse(root, f) {\r\n        if (!f(root)) {\r\n            return;\r\n        }\r\n        root.children.forEach(c => this._traverse(c, f));\r\n    }\r\n    /**\r\n     * Given a \\@param root tree and a \\@param node node, calculate the\r\n     * depth of the node in the tree\r\n     * @template T, K\r\n     * @param {?} root the tree\r\n     * @param {?} node the node we want to calculate the depth of\r\n     * @return {?}\r\n     */\r\n    getNodeDepth(root, node) {\r\n        return this.searchById(root, node.id).fold(-1, n => n.pathToRoot.length);\r\n    }\r\n    /**\r\n     * Flatten a \\@param root tree into a list of its nodes\r\n     * @template T, K\r\n     * @param {?} root the tree to be flattened\r\n     * @return {?}\r\n     */\r\n    flatten(root) {\r\n        /** @type {?} */\r\n        const result = [cloneDeep(root)];\r\n        for (let i = 0; i < result.length; i++) {\r\n            /** @type {?} */\r\n            const node = result[i];\r\n            if (node.children) {\r\n                result.splice(result.indexOf(node) + 1, 0, ...(/** @type {?} */ (node.children)));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Internal function used to build the pathToRoot of a node in a tree\r\n     * @template T, K\r\n     * @param {?} id the id of the node\r\n     * @param {?} pathMap the pathMap returned by searchById\r\n     * @return {?}\r\n     */\r\n    buildPath(id, pathMap) {\r\n        /** @type {?} */\r\n        const pathToRoot = [];\r\n        /** @type {?} */\r\n        let key = id;\r\n        while (key) {\r\n            if (pathMap[key]) {\r\n                pathToRoot.push(pathMap[key]);\r\n                key = pathMap[key].id;\r\n            }\r\n            else {\r\n                key = null;\r\n            }\r\n        }\r\n        return pathToRoot;\r\n    }\r\n}\nTreeService.ɵfac = function TreeService_Factory(t) { return new (t || TreeService)(); };\nTreeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TreeService, factory: TreeService.ɵfac, providedIn: 'root' });\r\n/** @nocollapse */ TreeService.ngInjectableDef = defineInjectable({ factory: function TreeService_Factory() { return new TreeService(); }, token: TreeService, providedIn: \"root\" });\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\r\nclass ValidatorService {\r\n    /**\r\n     * @template T, K\r\n     * @param {?} node\r\n     * @param {?} customColumnOrder\r\n     * @return {?}\r\n     */\r\n    validateCustomOrder(node, customColumnOrder) {\r\n        /** @type {?} */\r\n        const xorN = xor(Object.keys(node.value), customColumnOrder);\r\n        return {\r\n            valid: isEmpty(xorN),\r\n            xor: xorN\r\n        };\r\n    }\r\n}\nValidatorService.ɵfac = function ValidatorService_Factory(t) { return new (t || ValidatorService)(); };\nValidatorService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ValidatorService, factory: ValidatorService.ɵfac, providedIn: 'root' });\r\n/** @nocollapse */ ValidatorService.ngInjectableDef = defineInjectable({ factory: function ValidatorService_Factory() { return new ValidatorService(); }, token: ValidatorService, providedIn: \"root\" });\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst uuidv4 = require('uuid/v4');\r\nclass ConverterService {\r\n    /**\r\n     * @param {?} treeService\r\n     */\r\n    constructor(treeService) {\r\n        this.treeService = treeService;\r\n    }\r\n    /**\r\n     * Clone a Node<T> object and convert it to a SearchableNode<T>\r\n     * @template T\r\n     * @param {?} tree the node to be converted\r\n     * @return {?}\r\n     */\r\n    toSearchableTree(tree) {\r\n        /** @type {?} */\r\n        const treeClone = (/** @type {?} */ (cloneDeep(tree)));\r\n        this.treeService.traverse(treeClone, (node) => {\r\n            node.id = node.id ? node.id : uuidv4();\r\n        });\r\n        return treeClone;\r\n    }\r\n    /**\r\n     * Clone a SearchableNode<T> object and convert it to a TreeTableNode<T>\r\n     * @template T\r\n     * @param {?} tree the node to be converted\r\n     * @return {?}\r\n     */\r\n    toTreeTableTree(tree) {\r\n        /** @type {?} */\r\n        const treeClone = (/** @type {?} */ (cloneDeep(tree)));\r\n        this.treeService.traverse(treeClone, (node) => {\r\n            node.depth = this.treeService.getNodeDepth(treeClone, node);\r\n            node.isExpanded = true;\r\n            node.isVisible = true;\r\n        });\r\n        return treeClone;\r\n    }\r\n}\nConverterService.ɵfac = function ConverterService_Factory(t) { return new (t || ConverterService)(ɵngcc0.ɵɵinject(TreeService)); };\nConverterService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ConverterService, factory: ConverterService.ɵfac, providedIn: 'root' });\r\n/** @nocollapse */\r\nConverterService.ctorParameters = () => [\r\n    { type: TreeService }\r\n];\r\n/** @nocollapse */ ConverterService.ngInjectableDef = defineInjectable({ factory: function ConverterService_Factory() { return new ConverterService(inject(TreeService)); }, token: ConverterService, providedIn: \"root\" });\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst defaultOptions = {\r\n    verticalSeparator: true,\r\n    highlightRowOnHover: true,\r\n    elevation: 5\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Decorator that sets an Input() propertiy as required, will\r\n * throw an error if the property is not specified in the template.\r\n * I.e. \\@Input() \\@Required myProp: number;\r\n * @param {?} target\r\n * @param {?} property\r\n * @return {?}\r\n */\r\nfunction Required(target, property) {\r\n    Object.defineProperty(target, property, {\r\n        /**\r\n         * @return {?}\r\n         */\r\n        get() {\r\n            throw new Error(`Input '${property}' is required. Have you forgotten to add [${property}] = ... in your template?`);\r\n        },\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        set(value) {\r\n            Object.defineProperty(target, property, {\r\n                value,\r\n                writable: true,\r\n                configurable: true\r\n            });\r\n        },\r\n    });\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @template T\r\n */\r\nclass TreetableComponent {\r\n    /**\r\n     * @param {?} treeService\r\n     * @param {?} validatorService\r\n     * @param {?} converterService\r\n     * @param {?} elem\r\n     */\r\n    constructor(treeService, validatorService, converterService, elem) {\r\n        this.treeService = treeService;\r\n        this.validatorService = validatorService;\r\n        this.converterService = converterService;\r\n        this.options = {};\r\n        this.nodeClicked = new Subject();\r\n        /** @type {?} */\r\n        const tagName = elem.nativeElement.tagName.toLowerCase();\r\n        if (tagName === 'ng-treetable') {\r\n            console.warn(`DEPRECATION WARNING: \\n The 'ng-treetable' selector is being deprecated. Please use the new 'treetable' selector`);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.tree = Array.isArray(this.tree) ? this.tree : [this.tree];\r\n        this.options = this.parseOptions(defaultOptions);\r\n        /** @type {?} */\r\n        const customOrderValidator = this.validatorService.validateCustomOrder(this.tree[0], this.options.customColumnOrder);\r\n        if (this.options.customColumnOrder && !customOrderValidator.valid) {\r\n            throw new Error(`\r\n        Properties ${customOrderValidator.xor.map(x => `'${x}'`).join(', ')} incorrect or missing in customColumnOrder`);\r\n        }\r\n        this.displayedColumns = this.options.customColumnOrder\r\n            ? this.options.customColumnOrder\r\n            : this.extractNodeProps(this.tree[0]);\r\n        this.searchableTree = this.tree.map(t => this.converterService.toSearchableTree(t));\r\n        /** @type {?} */\r\n        const treeTableTree = this.searchableTree.map(st => this.converterService.toTreeTableTree(st));\r\n        this.treeTable = flatMap(treeTableTree, this.treeService.flatten);\r\n        this.dataSource = this.generateDataSource();\r\n    }\r\n    /**\r\n     * @param {?} tree\r\n     * @return {?}\r\n     */\r\n    extractNodeProps(tree) {\r\n        return Object.keys(tree.value).filter(x => typeof tree.value[x] !== 'object');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    generateDataSource() {\r\n        return new MatTableDataSource(this.treeTable.filter(x => x.isVisible));\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?=} step\r\n     * @return {?}\r\n     */\r\n    formatIndentation(node, step = 5) {\r\n        return '&nbsp;'.repeat(node.depth * step);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    formatElevation() {\r\n        return `mat-elevation-z${this.options.elevation}`;\r\n    }\r\n    /**\r\n     * @param {?} clickedNode\r\n     * @return {?}\r\n     */\r\n    onNodeClick(clickedNode) {\r\n        clickedNode.isExpanded = !clickedNode.isExpanded;\r\n        this.treeTable.forEach(el => {\r\n            el.isVisible = this.searchableTree.every(st => {\r\n                return this.treeService.searchById(st, el.id).\r\n                    fold([], n => n.pathToRoot)\r\n                    .every(p => this.treeTable.find(x => x.id === p.id).isExpanded);\r\n            });\r\n        });\r\n        this.dataSource = this.generateDataSource();\r\n        this.nodeClicked.next(clickedNode);\r\n    }\r\n    // Overrides default options with those specified by the user\r\n    /**\r\n     * @param {?} defaultOpts\r\n     * @return {?}\r\n     */\r\n    parseOptions(defaultOpts) {\r\n        return defaults(this.options, defaultOpts);\r\n    }\r\n}\nTreetableComponent.ɵfac = function TreetableComponent_Factory(t) { return new (t || TreetableComponent)(ɵngcc0.ɵɵdirectiveInject(TreeService), ɵngcc0.ɵɵdirectiveInject(ValidatorService), ɵngcc0.ɵɵdirectiveInject(ConverterService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nTreetableComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreetableComponent, selectors: [[\"ng-treetable\"], [\"treetable\"]], inputs: { options: \"options\", tree: \"tree\" }, outputs: { nodeClicked: \"nodeClicked\" }, decls: 4, vars: 5, consts: [[\"mat-table\", \"\", 3, \"dataSource\", \"ngClass\"], [4, \"ngFor\", \"ngForOf\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 3, \"ngClass\", 4, \"matRowDef\", \"matRowDefColumns\"], [3, \"matColumnDef\"], [\"mat-header-cell\", \"\", 3, \"ngClass\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"ngClass\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\", 3, \"ngClass\"], [\"mat-cell\", \"\", 3, \"ngClass\"], [4, \"ngIf\"], [1, \"value-cell\"], [3, \"innerHTML\"], [3, \"ngStyle\", \"click\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", 3, \"ngClass\"]], template: function TreetableComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n        ɵngcc0.ɵɵtemplate(1, TreetableComponent_div_1_Template, 4, 1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, TreetableComponent_tr_2_Template, 1, 0, \"tr\", 2);\n        ɵngcc0.ɵɵtemplate(3, TreetableComponent_tr_3_Template, 1, 3, \"tr\", 3);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"ngClass\", ctx.formatElevation());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.displayedColumns);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    } }, dependencies: [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc2.MatTable, ɵngcc2.MatHeaderCellDef, ɵngcc2.MatHeaderRowDef, ɵngcc2.MatColumnDef, ɵngcc2.MatCellDef, ɵngcc2.MatRowDef, ɵngcc2.MatHeaderCell, ɵngcc2.MatCell, ɵngcc2.MatHeaderRow, ɵngcc2.MatRow, ɵngcc3.MatIcon, ɵngcc1.TitleCasePipe], styles: [\"table[_ngcontent-%COMP%]{width:100%}.value-cell[_ngcontent-%COMP%]{display:flex;align-items:center}mat-icon[_ngcontent-%COMP%]{cursor:pointer}.highlight-on-hover[_ngcontent-%COMP%]:hover{background-color:#f0f0f5}td[class*=' mat-column'][_ngcontent-%COMP%]{width:10vw;min-width:10vw;max-width:10vw}.mat-cell[_ngcontent-%COMP%], .mat-header-cell[_ngcontent-%COMP%]{padding:10px}.vertical-separator[_ngcontent-%COMP%]{border-left:1px solid #f0f0f5}td[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{word-break:break-all}\"] });\r\n/** @nocollapse */\r\nTreetableComponent.ctorParameters = () => [\r\n    { type: TreeService },\r\n    { type: ValidatorService },\r\n    { type: ConverterService },\r\n    { type: ElementRef }\r\n];\r\nTreetableComponent.propDecorators = {\r\n    tree: [{ type: Input }],\r\n    options: [{ type: Input }],\r\n    nodeClicked: [{ type: Output }]\r\n};\r\n__decorate([\r\n    Required,\r\n    __metadata(\"design:type\", Object)\r\n], TreetableComponent.prototype, \"tree\", void 0);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ValidatorService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], null, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConverterService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: TreeService }]; }, null); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreetableComponent, [{\n        type: Component,\n        args: [{ selector: 'ng-treetable, treetable', template: \"<table mat-table [dataSource]=\\\"dataSource\\\" [ngClass]=\\\"formatElevation()\\\">\\n\\n  <div *ngFor=\\\"let column of displayedColumns; first as isFirst;\\\">\\n    <ng-container matColumnDef=\\\"{{column}}\\\">\\n      <th mat-header-cell *matHeaderCellDef [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\n        {{options.capitalisedHeader ? (column | titlecase) : column}}\\n      </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\" [ngClass]=\\\"{'vertical-separator': options.verticalSeparator}\\\">\\n        <div *ngIf=\\\"isFirst\\\">\\n          <div class=\\\"value-cell\\\">\\n            <div [innerHTML]=\\\"formatIndentation(element)\\\"></div>\\n            <mat-icon [ngStyle]=\\\"{'visibility': element.children.length ? 'visible' : 'hidden'}\\\" (click)=\\\"onNodeClick(element)\\\">\\n              {{element.isExpanded ? 'keyboard_arrow_down' : 'keyboard_arrow_right'}}\\n            </mat-icon>\\n            <div>{{element.value[column]}}</div>\\n          </div>\\n        </div>\\n        <div *ngIf=\\\"!isFirst\\\">\\n          {{element.value[column]}}\\n        </div>\\n      </td>\\n    </ng-container>\\n  </div>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n  <tr mat-row [ngClass]=\\\"{'highlight-on-hover': options.highlightRowOnHover}\\\" *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n</table>\\n\", styles: [\"table{width:100%}.value-cell{display:flex;align-items:center}mat-icon{cursor:pointer}.highlight-on-hover:hover{background-color:#f0f0f5}td[class*=' mat-column']{width:10vw;min-width:10vw;max-width:10vw}.mat-cell,.mat-header-cell{padding:10px}.vertical-separator{border-left:1px solid #f0f0f5}td div{word-break:break-all}\"] }]\n    }], function () { return [{ type: TreeService }, { type: ValidatorService }, { type: ConverterService }, { type: ɵngcc0.ElementRef }]; }, { options: [{\n            type: Input\n        }], nodeClicked: [{\n            type: Output\n        }], tree: [{\n            type: Input\n        }] }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\r\nclass TreetableModule {\r\n}\nTreetableModule.ɵfac = function TreetableModule_Factory(t) { return new (t || TreetableModule)(); };\nTreetableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TreetableModule });\nTreetableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule,\n        MatTableModule,\n        MatIconModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreetableModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    TreetableComponent\n                ],\n                imports: [\n                    CommonModule,\n                    MatTableModule,\n                    MatIconModule\n                ],\n                exports: [\n                    TreetableComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreetableModule, { declarations: function () { return [TreetableComponent]; }, imports: function () { return [CommonModule,\n        MatTableModule,\n        MatIconModule]; }, exports: function () { return [TreetableComponent]; } }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\r\n */\n\nexport { TreetableModule, TreetableComponent as ɵa, Required as ɵb, ConverterService as ɵe, TreeService as ɵc, ValidatorService as ɵd };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}