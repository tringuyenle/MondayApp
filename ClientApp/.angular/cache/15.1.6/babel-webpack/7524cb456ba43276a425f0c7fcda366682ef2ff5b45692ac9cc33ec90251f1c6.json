{"ast":null,"code":"import { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/sidenav\";\nimport * as i4 from \"@angular/material/checkbox\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"./header/header.component\";\nimport * as i7 from \"./boardcontent/boardcontent.component\";\nimport * as i8 from \"./boardinfo/boardinfo.component\";\nimport * as i9 from \"./sidebar/sidebar.component\";\nfunction AppComponent_mat_sidenav_container_8_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const e_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(e_r3);\n  }\n}\nfunction AppComponent_mat_sidenav_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-sidenav-container\", 6)(1, \"mat-sidenav\", 7, 8);\n    i0.ɵɵlistener(\"openedChange\", function AppComponent_mat_sidenav_container_8_Template_mat_sidenav_openedChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.opened = $event);\n    })(\"opened\", function AppComponent_mat_sidenav_container_8_Template_mat_sidenav_opened_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.events.push(\"open!\"));\n    })(\"closed\", function AppComponent_mat_sidenav_container_8_Template_mat_sidenav_closed_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.events.push(\"close!\"));\n    });\n    i0.ɵɵtext(3, \" Sidenav content \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-sidenav-content\")(5, \"p\")(6, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function AppComponent_mat_sidenav_container_8_Template_mat_checkbox_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.opened = $event);\n    });\n    i0.ɵɵtext(7, \"sidenav.opened\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"p\")(9, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function AppComponent_mat_sidenav_container_8_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const _r1 = i0.ɵɵreference(2);\n      return i0.ɵɵresetView(_r1.toggle());\n    });\n    i0.ɵɵtext(10, \"sidenav.toggle()\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(11, \"p\");\n    i0.ɵɵtext(12, \"Events:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 11);\n    i0.ɵɵtemplate(14, AppComponent_mat_sidenav_container_8_div_14_Template, 2, 1, \"div\", 12);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"opened\", ctx_r0.opened);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.opened);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.events);\n  }\n}\nconst TREE_DATA = [{\n  name: 'Fruit',\n  children: [{\n    name: 'Apple'\n  }, {\n    name: 'Banana'\n  }, {\n    name: 'Fruit loops'\n  }]\n}, {\n  name: 'Vegetable',\n  children: [{\n    name: 'Green',\n    children: [{\n      name: 'Broccoli'\n    }, {\n      name: 'Brussels sprouts'\n    }]\n  }, {\n    name: 'Orange',\n    children: [{\n      name: 'Pumpkins'\n    }, {\n      name: 'Carrots'\n    }]\n  }]\n}];\nexport class AppComponent {\n  constructor() {\n    this.displayedColumns = ['name', 'level'];\n    this._transformer = (node, level) => {\n      return {\n        expandable: !!node.children && node.children.length > 0,\n        name: node.name,\n        level: level\n      };\n    };\n    this.treeControl = new FlatTreeControl(node => node.level, node => node.expandable);\n    this.treeFlattener = new MatTreeFlattener(this._transformer, node => node.level, node => node.expandable, node => node.children);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    this.hasChild = (_, node) => node.expandable;\n    this.dataSource.data = TREE_DATA;\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 9,\n  vars: 1,\n  consts: [[1, \"flex\", \"flex-col\", \"w-full\", \"bg-indigo-50\", \"h-screen\", \"sticky\", \"top-0\"], [1, \"sticky\", \"top-0\", \"bg-indigo-50\"], [1, \"h-screen\", \"w-full\", \"flex\"], [1, \"bg-white\", \"w-1/4\", \"rounded-r-lg\", \"mr-3\"], [1, \"w-full\", \"bg-white\", \"h-full\", \"rounded-l-lg\"], [\"class\", \"example-container\", 4, \"ngIf\"], [1, \"example-container\"], [\"mode\", \"side\", 3, \"opened\", \"openedChange\", \"closed\"], [\"sidenav\", \"\"], [3, \"ngModel\", \"ngModelChange\"], [\"mat-button\", \"\", 3, \"click\"], [1, \"example-events\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"app-header\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"app-sidebar\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵelement(6, \"app-boardinfo\")(7, \"app-boardcontent\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(8, AppComponent_mat_sidenav_container_8_Template, 15, 3, \"mat-sidenav-container\", 5);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngIf\", ctx.shouldRun);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.NgControlStatus, i2.NgModel, i3.MatSidenav, i3.MatSidenavContainer, i3.MatSidenavContent, i4.MatCheckbox, i5.MatButton, i6.HeaderComponent, i7.BoardcontentComponent, i8.BoardinfoComponent, i9.SidebarComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["FlatTreeControl","MatTreeFlatDataSource","MatTreeFlattener","i0","TREE_DATA","name","children","AppComponent","constructor","node","level","expandable","length","_transformer","treeControl","treeFlattener","_","dataSource","data","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["E:\\WorkSpace\\MondayApp\\ClientApp\\src\\app\\app.component.ts","E:\\WorkSpace\\MondayApp\\ClientApp\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from '@angular/material/tree';\r\nimport { MatTableModule } from '@angular/material/table';\r\n\r\ninterface FoodNode {\r\n  name: string;\r\n  children?: FoodNode[];\r\n}\r\n\r\ninterface ExampleFlatNode{\r\n  expandable: boolean;\r\n  name: string;\r\n  level: number;\r\n}\r\n\r\nconst TREE_DATA: FoodNode[] = [\r\n  {\r\n    name: 'Fruit',\r\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}]\r\n  },\r\n  {\r\n    name: 'Vegetable',\r\n    children: [\r\n      {\r\n        name: 'Green',\r\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\r\n      },\r\n      {\r\n        name: 'Orange',\r\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n  displayedColumns: string[] = ['name', 'level'];\r\n\r\n  private _transformer = (node: FoodNode, level: number) => {\r\n    return {\r\n      expandable: !!node.children && node.children.length > 0,\r\n      name: node.name,\r\n      level: level,\r\n    };\r\n  };\r\n\r\n  constructor(){\r\n    this.dataSource.data = TREE_DATA;\r\n  }\r\n\r\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\r\n    node=>node.level,\r\n    node=>node.expandable\r\n  );\r\n\r\n  treeFlattener = new MatTreeFlattener(\r\n    this._transformer,\r\n    node=>node.level,\r\n    node=>node.expandable,\r\n    node=>node.children\r\n  );\r\n\r\n  dataSource= new MatTreeFlatDataSource(\r\n    this.treeControl, this.treeFlattener \r\n  );\r\n\r\n  hasChild = (_: number, \r\n    node: ExampleFlatNode) => node.expandable;\r\n}\r\n","<div class=\"flex flex-col w-full bg-indigo-50 h-screen sticky top-0\">\r\n  <app-header class=\"sticky top-0 bg-indigo-50\"></app-header>\r\n  <div class=\"h-screen w-full flex\">\r\n    <div class=\"bg-white w-1/4 rounded-r-lg mr-3\">\r\n      <app-sidebar></app-sidebar>\r\n    </div>\r\n    <div class=\"w-full bg-white h-full rounded-l-lg\">\r\n      <app-boardinfo></app-boardinfo>\r\n      <app-boardcontent></app-boardcontent>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<mat-sidenav-container class=\"example-container\" *ngIf=\"shouldRun\">\r\n  <mat-sidenav #sidenav mode=\"side\" [(opened)]=\"opened\" (opened)=\"events.push('open!')\"\r\n               (closed)=\"events.push('close!')\">\r\n    Sidenav content\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <p><mat-checkbox [(ngModel)]=\"opened\">sidenav.opened</mat-checkbox></p>\r\n    <p><button mat-button (click)=\"sidenav.toggle()\">sidenav.toggle()</button></p>\r\n    <p>Events:</p>\r\n    <div class=\"example-events\">\r\n      <div *ngFor=\"let e of events\">{{e}}</div>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}