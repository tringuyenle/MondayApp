{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../group-task-service/group-task.service\";\nimport * as i2 from \"../task-service/task.service\";\nimport * as i3 from \"../sub-task-service/sub-task.service\";\nimport * as i4 from \"../task-list-service/task-list.service\";\nexport class GroupTaskListService {\n  constructor(group_task_service, task_service, sub_task_service, task_list_service) {\n    this.group_task_service = group_task_service;\n    this.task_service = task_service;\n    this.sub_task_service = sub_task_service;\n    this.task_list_service = task_list_service;\n    this.group_task_list = [];\n    this.delete_task_list = [];\n    this.is_load_delete_list = false;\n  }\n  getGroupTaskList() {\n    this.group_task_service.getGroupTaskList().subscribe(data => {\n      this.group_task_list = data;\n      this.first_group = data[0];\n    });\n  }\n  reloadList() {\n    this.getGroupTaskList();\n  }\n  deleteGroupTask(group_task) {\n    if (confirm(`Are you sure to delete Group Task: ${group_task.name}`)) {\n      // this.task_service.deleteTask(group_task.id, false).subscribe({\n      //   error: () => console.log(\"Delete all task!\")\n      // });\n      this.task_service.getTaskList().subscribe(data => {\n        this.delete_task_list = data;\n        console.log(this.delete_task_list);\n        for (var delete_task of this.delete_task_list) {\n          this.t;\n        }\n      });\n      // this.group_task_service.deleteGroupTask(group_task.id).subscribe({\n      //   error: () => {\n      //     // console.log(\"Delete group task\");\n      //     this.reloadList();\n      //   }\n      // })\n    }\n  }\n}\n\nGroupTaskListService.ɵfac = function GroupTaskListService_Factory(t) {\n  return new (t || GroupTaskListService)(i0.ɵɵinject(i1.GroupTaskService), i0.ɵɵinject(i2.TaskService), i0.ɵɵinject(i3.SubTaskService), i0.ɵɵinject(i4.TaskListService));\n};\nGroupTaskListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupTaskListService,\n  factory: GroupTaskListService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;AAYA,OAAM,MAAOA,oBAAoB;EAO/BC,YAAoBC,kBAAoC,EAAUC,YAAyB,EACvEC,gBAAgC,EAAUC,iBAAkC;IAD5E,uBAAkB,GAAlBH,kBAAkB;IAA4B,iBAAY,GAAZC,YAAY;IAC1D,qBAAgB,GAAhBC,gBAAgB;IAA0B,sBAAiB,GAAjBC,iBAAiB;IAN/E,oBAAe,GAAgB,EAAE;IACjC,qBAAgB,GAAW,EAAE;IAC7B,wBAAmB,GAAW,KAAK;EAIiE;EAEpGC,gBAAgB;IACd,IAAI,CAACJ,kBAAkB,CAACI,gBAAgB,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MAC1D,IAAI,CAACC,eAAe,GAAGD,IAAI;MAC3B,IAAI,CAACE,WAAW,GAAGF,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC;EACJ;EAEAG,UAAU;IACR,IAAI,CAACL,gBAAgB,EAAE;EACzB;EAEAM,eAAe,CAACC,UAAqB;IACnC,IAAGC,OAAO,CAAC,sCAAsCD,UAAU,CAACE,IAAI,EAAE,CAAC,EAAE;MACnE;MACA;MACA;MAGA,IAAI,CAACZ,YAAY,CAACa,WAAW,EAAE,CAACT,SAAS,CAAEC,IAAI,IAAG;QAChD,IAAI,CAACS,gBAAgB,GAAGT,IAAI;QAC5BU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,gBAAgB,CAAC;QAElC,KAAI,IAAIG,WAAW,IAAI,IAAI,CAACH,gBAAgB,EAAE;UAC5C,IAAI,CAACI,CAAC;;MAEV,CAAC,CAAC;MAEF;MACA;MACA;MACA;MACA;MACA;;EAEJ;;;AA5CWrB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAsB,SAApBtB,oBAAoB;EAAAuB,YAFnB;AAAM","names":["GroupTaskListService","constructor","group_task_service","task_service","sub_task_service","task_list_service","getGroupTaskList","subscribe","data","group_task_list","first_group","reloadList","deleteGroupTask","group_task","confirm","name","getTaskList","delete_task_list","console","log","delete_task","t","factory","providedIn"],"sourceRoot":"","sources":["E:\\.NetCoreApp\\MondayApp\\ClientApp\\src\\services\\group-task-list-service\\group-task-list.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Grouptask } from 'src/app/grouptask';\r\nimport { GroupTaskService } from '../group-task-service/group-task.service';\r\nimport { TaskService } from '../task-service/task.service';\r\nimport { Task } from 'src/app/task';\r\nimport { SubTaskService } from '../sub-task-service/sub-task.service';\r\nimport { tap, finalize} from 'rxjs/operators'\r\nimport { TaskListService } from '../task-list-service/task-list.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupTaskListService {\r\n\r\n  group_task_list: Grouptask[] = [];\r\n  delete_task_list: Task[] = [];\r\n  is_load_delete_list: boolean= false;\r\n  first_group!: Grouptask;\r\n\r\n  constructor(private group_task_service: GroupTaskService, private task_service: TaskService,\r\n              private sub_task_service: SubTaskService, private task_list_service: TaskListService) { }\r\n\r\n  getGroupTaskList() {\r\n    this.group_task_service.getGroupTaskList().subscribe(data => {\r\n      this.group_task_list = data;\r\n      this.first_group = data[0];\r\n    });\r\n  }\r\n\r\n  reloadList() {\r\n    this.getGroupTaskList();\r\n  }\r\n\r\n  deleteGroupTask(group_task: Grouptask) {\r\n    if(confirm(`Are you sure to delete Group Task: ${group_task.name}`)) {\r\n      // this.task_service.deleteTask(group_task.id, false).subscribe({\r\n      //   error: () => console.log(\"Delete all task!\")\r\n      // });\r\n\r\n\r\n      this.task_service.getTaskList().subscribe( data => {\r\n        this.delete_task_list = data;\r\n        console.log(this.delete_task_list);\r\n\r\n        for(var delete_task of this.delete_task_list) {\r\n          this.t\r\n        }\r\n      })\r\n      \r\n      // this.group_task_service.deleteGroupTask(group_task.id).subscribe({\r\n      //   error: () => {\r\n      //     // console.log(\"Delete group task\");\r\n      //     this.reloadList();\r\n      //   }\r\n      // })\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}