{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MondayService {\n  constructor(http) {\n    this.http = http;\n    this.mondayUrl = \"http://localhost:5157/api/Monday\";\n  }\n  getMondays() {\n    return this.http.get(this.mondayUrl);\n  }\n}\nMondayService.ɵfac = function MondayService_Factory(t) {\n  return new (t || MondayService)(i0.ɵɵinject(i1.HttpClient));\n};\nMondayService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MondayService,\n  factory: MondayService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAUA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFf,cAAS,GAAG,kCAAkC;EAEf;EAExCC,UAAU;IACR,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAM,IAAI,CAACC,SAAS,CAAC;EAC3C;;AAPWL,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAM,SAAbN,aAAa;EAAAO,YAFZ;AAAM","names":["MondayService","constructor","http","getMondays","get","mondayUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\DELL\\source\\repos\\MondayApp\\ClientApp\\src\\app\\monday\\monday.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Monday } from './monday';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MondayService {\n  readonly mondayUrl = \"http://localhost:5157/api/Monday\";\n\n  constructor(private http: HttpClient) { }\n\n  getMondays(): Observable<any[]> {\n    return this.http.get<any>(this.mondayUrl);\n  }\n\n  //getMonday(id: string | null): Observable<Monday> {\n  //  if (id === '') {\n  //    return of(this.initializeMonday());\n  //  }\n  //  const url = `${this.mondayUrl}/${id}`;\n  //  return this.http.get<Monday>(url)\n  //    .pipe(\n  //      catchError(this.handleError)\n  //    );\n  //}\n  //private handleError(err: any) {\n  //  let errorMessage: string;\n  //  if (err.error instanceof ErrorEvent) {\n  //    errorMessage = `An error occurred: ${err.error.message}`;\n  //  } else {\n  //    errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n  //  }\n  //  console.error(err);\n  //  return throwError(() => errorMessage);\n  //}\n\n  //private initializeMonday(): Monday {\n  //  return {\n  //    id: \"\",\n  //    name: \"\",\n  //    parent_task: \"\",\n  //    created_by: \"\",\n  //    created_date: \"\",\n  //    status: \"\"\n  //  };\n  //}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}