{"ast":null,"code":"import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n  constructor(elementRef, tree, tabIndex) {\n    super(elementRef, tree);\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵinjectAttribute('tabindex'));\n};\nMatTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  hostAttrs: [1, \"mat-tree-node\"],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }],\n      host: {\n        'class': 'mat-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, null);\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {}\nMatTreeNodeDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodeDef_BaseFactory;\n  return function MatTreeNodeDef_Factory(t) {\n    return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n  };\n}();\nMatTreeNodeDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  /** Whether the node is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Tabindex for the node. */\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  constructor(elementRef, tree, differs, tabIndex) {\n    super(elementRef, tree, differs);\n    this._disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵinjectAttribute('tabindex'));\n};\nMatNestedTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  hostAttrs: [1, \"mat-nested-tree-node\"],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }],\n      host: {\n        'class': 'mat-nested-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  get indent() {\n    return this._indent;\n  }\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n}\nMatTreeNodePadding.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodePadding_BaseFactory;\n  return function MatTreeNodePadding_Factory(t) {\n    return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n  };\n}();\nMatTreeNodePadding.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\nMatTreeNodeOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {}\nMatTree.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTree_BaseFactory;\n  return function MatTree_Factory(t) {\n    return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = i0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n  };\n}();\nMatTree.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n  exportAs: [\"matTree\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {}\nMatTreeNodeToggle.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodeToggle_BaseFactory;\n  return function MatTreeNodeToggle_Factory(t) {\n    return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n  };\n}();\nMatTreeNodeToggle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }],\n      inputs: ['recursive: matTreeNodeToggleRecursive']\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nclass MatTreeModule {}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\nMatTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CdkTreeModule, MatCommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n  constructor(_treeControl, _treeFlattener, initialData) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject([]);\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n  connect(collectionViewer) {\n    return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   */\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n  }\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"names":["i1","CdkTreeNode","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTree","CdkTreeNodeToggle","CdkTreeModule","i0","Directive","Attribute","Input","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","mixinTabIndex","mixinDisabled","MatCommonModule","coerceBooleanProperty","DataSource","BehaviorSubject","merge","take","map","_MatTreeNodeBase","MatTreeNode","constructor","elementRef","tree","tabIndex","Number","ngOnInit","ngOnDestroy","ɵfac","ElementRef","ɵdir","provide","useExisting","type","args","selector","exportAs","inputs","providers","host","undefined","decorators","MatTreeNodeDef","data","MatNestedTreeNode","disabled","_disabled","value","_tabIndex","differs","ngAfterContentInit","IterableDiffers","node","MatTreeNodePadding","level","_level","_setLevelInput","indent","_indent","_setIndentInput","MatTreeNodeOutlet","viewContainer","_node","ViewContainerRef","MatTree","ɵcmp","template","encapsulation","None","changeDetection","Default","styles","_nodeOutlet","static","MatTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","ɵmod","ɵinj","imports","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_data","next","_flattenedData","_treeFlattener","_treeControl","dataNodes","initialData","_expandedData","connect","collectionViewer","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource","arguments"],"sources":["E:/WorkSpace/MondayApp/ClientApp/node_modules/@angular/material/fesm2020/tree.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatTreeNode, selector: \"mat-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, host: { classAttribute: \"mat-tree-node\" }, providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }], exportAs: [\"matTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-tree-node',\n                    exportAs: 'matTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }],\n                    host: {\n                        'class': 'mat-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; } });\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNodeDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatTreeNodeDef, selector: \"[matTreeNodeDef]\", inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeDef]',\n                    inputs: ['when: matTreeNodeDefWhen'],\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }],\n                }]\n        }], propDecorators: { data: [{\n                type: Input,\n                args: ['matTreeNode']\n            }] } });\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /** Whether the node is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Tabindex for the node. */\n    get tabIndex() {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i0.IterableDiffers }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatNestedTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatNestedTreeNode, selector: \"mat-nested-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, host: { classAttribute: \"mat-nested-tree-node\" }, providers: [\n        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n    ], exportAs: [\"matNestedTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-nested-tree-node',\n                    exportAs: 'matNestedTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n                    ],\n                    host: {\n                        'class': 'mat-nested-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; }, propDecorators: { node: [{\n                type: Input,\n                args: ['matNestedTreeNode']\n            }], disabled: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }] } });\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n}\nMatTreeNodePadding.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNodePadding, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodePadding.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatTreeNodePadding, selector: \"[matTreeNodePadding]\", inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }],\n                }]\n        }], propDecorators: { level: [{\n                type: Input,\n                args: ['matTreeNodePadding']\n            }], indent: [{\n                type: Input,\n                args: ['matTreeNodePaddingIndent']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\", providers: [\n        {\n            provide: CdkTreeNodeOutlet,\n            useExisting: MatTreeNodeOutlet,\n        },\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeOutlet]',\n                    providers: [\n                        {\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: MatTreeNodeOutlet,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TREE_NODE_OUTLET_NODE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTree, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatTree.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatTree, selector: \"mat-tree\", host: { attributes: { \"role\": \"tree\" }, classAttribute: \"mat-tree\" }, providers: [{ provide: CdkTree, useExisting: MatTree }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: MatTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"matTree\"], usesInheritance: true, ngImport: i0, template: `<ng-container matTreeNodeOutlet></ng-container>`, isInline: true, styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\"], dependencies: [{ kind: \"directive\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTree, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                        'class': 'mat-tree',\n                        'role': 'tree',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\"] }]\n        }], propDecorators: { _nodeOutlet: [{\n                type: ViewChild,\n                args: [MatTreeNodeOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n}\nMatTreeNodeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNodeToggle, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatTreeNodeToggle, selector: \"[matTreeNodeToggle]\", inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }],\n                    inputs: ['recursive: matTreeNodeToggleRecursive'],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet,\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeModule, declarations: [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet], imports: [CdkTreeModule, MatCommonModule], exports: [MatCommonModule, MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet] });\nMatTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeModule, imports: [CdkTreeModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTreeModule, MatCommonModule],\n                    exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                    declarations: MAT_TREE_DIRECTIVES,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n    }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}