{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar function_1 = require(\"./function\");\nvar Semigroup_1 = require(\"./Semigroup\");\n/**\n * @since 1.0.0\n */\nexports.fold = function (M) {\n  return Semigroup_1.fold(M)(M.empty);\n};\n/**\n * Given a tuple of monoids returns a monoid for the tuple\n *\n * @example\n * import { getTupleMonoid, monoidString, monoidSum, monoidAll } from 'fp-ts/lib/Monoid'\n *\n * const M1 = getTupleMonoid(monoidString, monoidSum)\n * assert.deepStrictEqual(M1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const M2 = getTupleMonoid(monoidString, monoidSum, monoidAll)\n * assert.deepStrictEqual(M2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @since 1.0.0\n */\nexports.getTupleMonoid = function () {\n  var monoids = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    monoids[_i] = arguments[_i];\n  }\n  return __assign({}, Semigroup_1.getTupleSemigroup.apply(void 0, monoids), {\n    empty: monoids.map(function (m) {\n      return m.empty;\n    })\n  });\n};\n/**\n * Use `getTupleMonoid` instead\n * @since 1.0.0\n * @deprecated\n */\nexports.getProductMonoid = function (MA, MB) {\n  return exports.getTupleMonoid(MA, MB);\n};\n/**\n * @since 1.0.0\n */\nexports.getDualMonoid = function (M) {\n  return __assign({}, Semigroup_1.getDualSemigroup(M), {\n    empty: M.empty\n  });\n};\n/**\n * Boolean monoid under conjunction\n * @since 1.0.0\n */\nexports.monoidAll = __assign({}, Semigroup_1.semigroupAll, {\n  empty: true\n});\n/**\n * Boolean monoid under disjunction\n * @since 1.0.0\n */\nexports.monoidAny = __assign({}, Semigroup_1.semigroupAny, {\n  empty: false\n});\nvar emptyArray = [];\n/**\n * @since 1.0.0\n */\nexports.unsafeMonoidArray = {\n  concat: function_1.concat,\n  empty: emptyArray\n};\n/**\n * Use `Array`'s `getMonoid`\n *\n * @since 1.0.0\n * @deprecated\n */\nexports.getArrayMonoid = function () {\n  return exports.unsafeMonoidArray;\n};\nvar emptyObject = {};\nfunction getDictionaryMonoid(S) {\n  return __assign({}, Semigroup_1.getDictionarySemigroup(S), {\n    empty: emptyObject\n  });\n}\nexports.getDictionaryMonoid = getDictionaryMonoid;\n/**\n * Number monoid under addition\n * @since 1.0.0\n */\nexports.monoidSum = __assign({}, Semigroup_1.semigroupSum, {\n  empty: 0\n});\n/**\n * Number monoid under multiplication\n * @since 1.0.0\n */\nexports.monoidProduct = __assign({}, Semigroup_1.semigroupProduct, {\n  empty: 1\n});\n/**\n * @since 1.0.0\n */\nexports.monoidString = __assign({}, Semigroup_1.semigroupString, {\n  empty: ''\n});\n/**\n * @since 1.0.0\n */\nexports.monoidVoid = __assign({}, Semigroup_1.semigroupVoid, {\n  empty: undefined\n});\n/**\n * @since 1.0.0\n */\nexports.getFunctionMonoid = function (M) {\n  return function () {\n    return __assign({}, Semigroup_1.getFunctionSemigroup(M)(), {\n      empty: function () {\n        return M.empty;\n      }\n    });\n  };\n};\n/**\n * @since 1.0.0\n */\nexports.getEndomorphismMonoid = function () {\n  return {\n    concat: function (x, y) {\n      return function (a) {\n        return x(y(a));\n      };\n    },\n    empty: function_1.identity\n  };\n};\n/**\n * @since 1.14.0\n */\nexports.getStructMonoid = function (monoids) {\n  var empty = {};\n  for (var _i = 0, _a = Object.keys(monoids); _i < _a.length; _i++) {\n    var key = _a[_i];\n    empty[key] = monoids[key].empty;\n  }\n  return __assign({}, Semigroup_1.getStructSemigroup(monoids), {\n    empty: empty\n  });\n};\n/**\n * Use `getStructMonoid` instead\n * @since 1.0.0\n * @deprecated\n */\nexports.getRecordMonoid = function (monoids) {\n  return exports.getStructMonoid(monoids);\n};\n/**\n * @since 1.9.0\n */\nexports.getMeetMonoid = function (B) {\n  return __assign({}, Semigroup_1.getMeetSemigroup(B), {\n    empty: B.top\n  });\n};\n/**\n * @since 1.9.0\n */\nexports.getJoinMonoid = function (B) {\n  return __assign({}, Semigroup_1.getJoinSemigroup(B), {\n    empty: B.bottom\n  });\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","function_1","require","Semigroup_1","fold","M","empty","getTupleMonoid","monoids","_i","getTupleSemigroup","map","m","getProductMonoid","MA","MB","getDualMonoid","getDualSemigroup","monoidAll","semigroupAll","monoidAny","semigroupAny","emptyArray","unsafeMonoidArray","concat","getArrayMonoid","emptyObject","getDictionaryMonoid","S","getDictionarySemigroup","monoidSum","semigroupSum","monoidProduct","semigroupProduct","monoidString","semigroupString","monoidVoid","semigroupVoid","undefined","getFunctionMonoid","getFunctionSemigroup","getEndomorphismMonoid","x","y","a","identity","getStructMonoid","_a","keys","key","getStructSemigroup","getRecordMonoid","getMeetMonoid","B","getMeetSemigroup","top","getJoinMonoid","getJoinSemigroup","bottom"],"sources":["C:/Users/DELL/source/repos/MondayApp/ClientApp/node_modules/fp-ts/lib/Monoid.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar function_1 = require(\"./function\");\nvar Semigroup_1 = require(\"./Semigroup\");\n/**\n * @since 1.0.0\n */\nexports.fold = function (M) {\n    return Semigroup_1.fold(M)(M.empty);\n};\n/**\n * Given a tuple of monoids returns a monoid for the tuple\n *\n * @example\n * import { getTupleMonoid, monoidString, monoidSum, monoidAll } from 'fp-ts/lib/Monoid'\n *\n * const M1 = getTupleMonoid(monoidString, monoidSum)\n * assert.deepStrictEqual(M1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const M2 = getTupleMonoid(monoidString, monoidSum, monoidAll)\n * assert.deepStrictEqual(M2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @since 1.0.0\n */\nexports.getTupleMonoid = function () {\n    var monoids = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        monoids[_i] = arguments[_i];\n    }\n    return __assign({}, Semigroup_1.getTupleSemigroup.apply(void 0, monoids), { empty: monoids.map(function (m) { return m.empty; }) });\n};\n/**\n * Use `getTupleMonoid` instead\n * @since 1.0.0\n * @deprecated\n */\nexports.getProductMonoid = function (MA, MB) {\n    return exports.getTupleMonoid(MA, MB);\n};\n/**\n * @since 1.0.0\n */\nexports.getDualMonoid = function (M) {\n    return __assign({}, Semigroup_1.getDualSemigroup(M), { empty: M.empty });\n};\n/**\n * Boolean monoid under conjunction\n * @since 1.0.0\n */\nexports.monoidAll = __assign({}, Semigroup_1.semigroupAll, { empty: true });\n/**\n * Boolean monoid under disjunction\n * @since 1.0.0\n */\nexports.monoidAny = __assign({}, Semigroup_1.semigroupAny, { empty: false });\nvar emptyArray = [];\n/**\n * @since 1.0.0\n */\nexports.unsafeMonoidArray = {\n    concat: function_1.concat,\n    empty: emptyArray\n};\n/**\n * Use `Array`'s `getMonoid`\n *\n * @since 1.0.0\n * @deprecated\n */\nexports.getArrayMonoid = function () {\n    return exports.unsafeMonoidArray;\n};\nvar emptyObject = {};\nfunction getDictionaryMonoid(S) {\n    return __assign({}, Semigroup_1.getDictionarySemigroup(S), { empty: emptyObject });\n}\nexports.getDictionaryMonoid = getDictionaryMonoid;\n/**\n * Number monoid under addition\n * @since 1.0.0\n */\nexports.monoidSum = __assign({}, Semigroup_1.semigroupSum, { empty: 0 });\n/**\n * Number monoid under multiplication\n * @since 1.0.0\n */\nexports.monoidProduct = __assign({}, Semigroup_1.semigroupProduct, { empty: 1 });\n/**\n * @since 1.0.0\n */\nexports.monoidString = __assign({}, Semigroup_1.semigroupString, { empty: '' });\n/**\n * @since 1.0.0\n */\nexports.monoidVoid = __assign({}, Semigroup_1.semigroupVoid, { empty: undefined });\n/**\n * @since 1.0.0\n */\nexports.getFunctionMonoid = function (M) { return function () {\n    return __assign({}, Semigroup_1.getFunctionSemigroup(M)(), { empty: function () { return M.empty; } });\n}; };\n/**\n * @since 1.0.0\n */\nexports.getEndomorphismMonoid = function () {\n    return {\n        concat: function (x, y) { return function (a) { return x(y(a)); }; },\n        empty: function_1.identity\n    };\n};\n/**\n * @since 1.14.0\n */\nexports.getStructMonoid = function (monoids) {\n    var empty = {};\n    for (var _i = 0, _a = Object.keys(monoids); _i < _a.length; _i++) {\n        var key = _a[_i];\n        empty[key] = monoids[key].empty;\n    }\n    return __assign({}, Semigroup_1.getStructSemigroup(monoids), { empty: empty });\n};\n/**\n * Use `getStructMonoid` instead\n * @since 1.0.0\n * @deprecated\n */\nexports.getRecordMonoid = function (monoids) {\n    return exports.getStructMonoid(monoids);\n};\n/**\n * @since 1.9.0\n */\nexports.getMeetMonoid = function (B) {\n    return __assign({}, Semigroup_1.getMeetSemigroup(B), { empty: B.top });\n};\n/**\n * @since 1.9.0\n */\nexports.getJoinMonoid = function (B) {\n    return __assign({}, Semigroup_1.getJoinSemigroup(B), { empty: B.bottom });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}