{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nlet SubtaskComponent = class SubtaskComponent {\n  editColor(task) {\n    if (this.subTaskid === '') this.subTaskid = task.id;else this.subTaskid = '';\n    console.log(this.subTaskid);\n  }\n  editColorSuccess(c, t) {\n    this.color = c;\n    t.status = c;\n    this.save(t);\n  }\n  save(task) {\n    this.edit_sub_task_service.saveCell(task);\n  }\n  setdate(t) {\n    t.create_date = document.getElementById(t.id + \"date\").value;\n    this.save(t);\n  }\n  selectAll() {}\n  ngOnInit() {\n    this.sub_task_list_service.getSubTaskList();\n    console.log(this.sub_task_list_service.sub_task_list);\n  }\n  drop(event) {\n    moveItemInArray(this.sub_task_list_service.sub_task_list, event.previousIndex, event.currentIndex);\n  }\n  checkIfAllSelected() {\n    this.selectedAll = this.sub_task_list_service.sub_task_list.every(function (item) {\n      return item.selected == true;\n    });\n  }\n  constructor(sub_task_list_service, add_task_service, edit) {\n    this.sub_task_list_service = sub_task_list_service;\n    this.add_task_service = add_task_service;\n    this.edit = edit;\n    this.subTaskid = '';\n    this.parent_id = '';\n    this.colorlist = ['bg-green-400', 'bg-amber-400', 'bg-red-500', 'bg-gray-300'];\n    this.color = this.colorlist[2];\n    this.Status = new Map([[\"bg-green-400\", \"Done\"], ['bg-amber-400', 'Working on it'], ['bg-red-500', 'Stuck'], ['bg-gray-300', 'None']]);\n  }\n};\n__decorate([Input()], SubtaskComponent.prototype, \"parent_id\", void 0);\nSubtaskComponent = __decorate([Component({\n  selector: 'app-subtask',\n  templateUrl: './subtask.component.html',\n  styleUrls: ['./subtask.component.css']\n})], SubtaskComponent);\nexport { SubtaskComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAgB,eAAe;AAExD,SAAsBC,eAAe,QAAQ,wBAAwB;AAW9D,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAQ3BC,SAAS,CAACC,IAAU;IAClB,IAAI,IAAI,CAACC,SAAS,KAAK,EAAE,EAAE,IAAI,CAACA,SAAS,GAAGD,IAAI,CAACE,EAAE,CAAC,KAC/C,IAAI,CAACD,SAAS,GAAG,EAAE;IACxBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,SAAS,CAAC;EAC7B;EACAI,gBAAgB,CAACC,CAAS,EAAEC,CAAO;IACjC,IAAI,CAACC,KAAK,GAAGF,CAAC;IACdC,CAAC,CAACE,MAAM,GAAGH,CAAC;IACZ,IAAI,CAACI,IAAI,CAACH,CAAC,CAAC;EACd;EAEAG,IAAI,CAACV,IAAU;IACb,IAAI,CAACW,qBAAqB,CAACC,QAAQ,CAACZ,IAAI,CAAC;EAC3C;EAEAa,OAAO,CAACN,CAAO;IACbA,CAAC,CAACO,WAAW,GAAsBC,QAAQ,CAACC,cAAc,CAACT,CAAC,CAACL,EAAE,GAAC,MAAM,CAAE,CAACe,KAAK;IAC9E,IAAI,CAACP,IAAI,CAACH,CAAC,CAAC;EACd;EAEAW,SAAS,IAET;EAEAC,QAAQ;IACJ,IAAI,CAACC,qBAAqB,CAACC,cAAc,EAAE;IAC3ClB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACgB,qBAAqB,CAACE,aAAa,CAAC;EACzD;EAEAC,IAAI,CAACC,KAA4B;IAC/B3B,eAAe,CAAC,IAAI,CAACuB,qBAAqB,CAACE,aAAa,EAAEE,KAAK,CAACC,aAAa,EAAED,KAAK,CAACE,YAAY,CAAC;EACpG;EAEAC,kBAAkB;IAChB,IAAI,CAACC,WAAW,GAAG,IAAI,CAACR,qBAAqB,CAACE,aAAa,CAACO,KAAK,CAAC,UAASC,IAAQ;MAC/E,OAAOA,IAAI,CAACC,QAAQ,IAAI,IAAI;IAC9B,CAAC,CAAC;EACN;EAGAC,YAAmBZ,qBAAyC,EAASa,gBAAgC,EAClFC,IAAI;IADJ,0BAAqB,GAArBd,qBAAqB;IAA6B,qBAAgB,GAAhBa,gBAAgB;IAClE,SAAI,GAAJC,IAAI;IA/CvB,cAAS,GAAW,EAAE;IACb,cAAS,GAAW,EAAE;IAC/B,cAAS,GAAa,CAAC,cAAc,EAAE,cAAc,EAAE,YAAY,EAAE,aAAa,CAAC;IACnF,UAAK,GAAW,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;IACjC,WAAM,GAAG,IAAIC,GAAG,CAAiB,CAAC,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,CAAC;EA2CvH;CAC3B;AA/CUC,YAARzC,KAAK,EAAE,mDAAwB;AAHrBE,gBAAgB,eAL5BH,SAAS,CAAC;EACT2C,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GACW1C,gBAAgB,CAkD5B;SAlDYA,gBAAgB","names":["Component","Input","moveItemInArray","SubtaskComponent","editColor","task","subTaskid","id","console","log","editColorSuccess","c","t","color","status","save","edit_sub_task_service","saveCell","setdate","create_date","document","getElementById","value","selectAll","ngOnInit","sub_task_list_service","getSubTaskList","sub_task_list","drop","event","previousIndex","currentIndex","checkIfAllSelected","selectedAll","every","item","selected","constructor","add_task_service","edit","colorlist","Map","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\WorkSpace\\MondayApp\\ClientApp\\src\\app\\subtask\\subtask.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\r\nimport { SubTaskListService } from 'src/services/sub-task-list-service/sub-task-list.service';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Task } from '../task';\r\nimport { NgFor, NgIf } from '@angular/common';\r\nimport { AddTaskService } from 'src/services/add-task-service/add-task.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-subtask',\r\n  templateUrl: './subtask.component.html',\r\n  styleUrls: ['./subtask.component.css']\r\n})\r\nexport class SubtaskComponent implements OnInit{\r\n  selectedAll: any;\r\n  subTaskid: string = '';\r\n  @Input() parent_id: string = '';\r\n  colorlist: string[] = ['bg-green-400', 'bg-amber-400', 'bg-red-500', 'bg-gray-300'];\r\n  color: string = this.colorlist[2];\r\n  Status = new Map<string, string>([[\"bg-green-400\", \"Done\"], ['bg-amber-400', 'Working on it'], ['bg-red-500', 'Stuck'], ['bg-gray-300', 'None']]);\r\n\r\n  editColor(task: Task): void {\r\n    if (this.subTaskid === '') this.subTaskid = task.id;\r\n    else this.subTaskid = '';\r\n    console.log(this.subTaskid);\r\n  }\r\n  editColorSuccess(c: string, t: Task): void {\r\n    this.color = c;\r\n    t.status = c;\r\n    this.save(t);\r\n  }\r\n\r\n  save(task: Task) {\r\n    this.edit_sub_task_service.saveCell(task)\r\n  }\r\n\r\n  setdate(t: Task): void {\r\n    t.create_date = (<HTMLInputElement>document.getElementById(t.id+\"date\")).value;\r\n    this.save(t);\r\n  }\r\n  \r\n  selectAll() {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n      this.sub_task_list_service.getSubTaskList();\r\n      console.log(this.sub_task_list_service.sub_task_list);\r\n  }\r\n\r\n  drop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.sub_task_list_service.sub_task_list, event.previousIndex, event.currentIndex);\r\n  }\r\n\r\n  checkIfAllSelected() {\r\n    this.selectedAll = this.sub_task_list_service.sub_task_list.every(function(item:any) {\r\n        return item.selected == true;\r\n      })\r\n  }\r\n\r\n\r\n  constructor(public sub_task_list_service: SubTaskListService, public add_task_service: AddTaskService\r\n              public edit) {};\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}