{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nlet SubtaskComponent = class SubtaskComponent {\n  openSubTaskDrawer(tempTaskName, tempPerson) {\n    this.openDrawer.emit();\n  }\n  editColor(task) {\n    if (this.subTaskid === '') this.subTaskid = task.id;else this.subTaskid = '';\n    console.log(this.subTaskid);\n  }\n  editColorSuccess(c, t) {\n    this.color = c;\n    t.status = c;\n    this.save(t);\n  }\n  save(task) {\n    this.edit_sub_task_service.saveCell(task);\n  }\n  setdate(t) {\n    t.create_date = document.getElementById(t.id + \"date\").value;\n    this.save(t);\n  }\n  addPerson() {\n    this.personlist.push(this.person);\n  }\n  editPerson(task) {\n    if (this.personid === '') this.personid = task.id;else if (this.personid == 'add') this.personid = task.id;else this.personid = '';\n  }\n  clickInputAddPerson(task) {\n    this.personid = 'add';\n  }\n  editPersonSuccess(p, t) {\n    t.create_by = p;\n    this.save(t);\n  }\n  selectAll() {\n    // this.selectedAll = this.subtask_list_service.task_list.every(function (item: any) {\n    //   return item.selected == true;\n    // })\n  }\n  ngOnInit() {\n    this.sub_task_list_service.getSubTaskList();\n    console.log(this.sub_task_list_service.sub_task_list);\n  }\n  drop(event) {\n    moveItemInArray(this.sub_task_list_service.sub_task_list, event.previousIndex, event.currentIndex);\n  }\n  checkIfAllSelected() {\n    this.selectedAll = this.sub_task_list_service.sub_task_list.every(function (item) {\n      return item.selected == true;\n    });\n  }\n  constructor(sub_task_list_service, add_task_service, edit_sub_task_service) {\n    this.sub_task_list_service = sub_task_list_service;\n    this.add_task_service = add_task_service;\n    this.edit_sub_task_service = edit_sub_task_service;\n    this.subTaskid = '';\n    // isDrawerOpen: boolean = false;\n    // tempTaskName: string = '';\n    // tempPerson: string = '';\n    this.openDrawer = new EventEmitter();\n    this.parent_id = '';\n    this.colorlist = ['bg-green-400', 'bg-amber-400', 'bg-red-500', 'bg-gray-300'];\n    this.color = this.colorlist[2];\n    this.Status = new Map([[\"bg-green-400\", \"Done\"], ['bg-amber-400', 'Working on it'], ['bg-red-500', 'Stuck'], ['bg-gray-300', 'None']]);\n    //check selected Person Column\n    this.personid = '';\n    this.personlist = ['Thành', 'Quân', 'Nguyên'];\n    this.person = '';\n  }\n};\n__decorate([Output()], SubtaskComponent.prototype, \"openDrawer\", void 0);\n__decorate([Input()], SubtaskComponent.prototype, \"parent_id\", void 0);\nSubtaskComponent = __decorate([Component({\n  selector: 'app-subtask',\n  templateUrl: './subtask.component.html',\n  styleUrls: ['./subtask.component.css']\n})], SubtaskComponent);\nexport { SubtaskComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Input","Output","moveItemInArray","SubtaskComponent","openSubTaskDrawer","tempTaskName","tempPerson","openDrawer","emit","editColor","task","subTaskid","id","console","log","editColorSuccess","c","t","color","status","save","edit_sub_task_service","saveCell","setdate","create_date","document","getElementById","value","addPerson","personlist","push","person","editPerson","personid","clickInputAddPerson","editPersonSuccess","p","create_by","selectAll","ngOnInit","sub_task_list_service","getSubTaskList","sub_task_list","drop","event","previousIndex","currentIndex","checkIfAllSelected","selectedAll","every","item","selected","constructor","add_task_service","colorlist","Map","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\DELL\\source\\repos\\MondayApp\\ClientApp\\src\\app\\subtask\\subtask.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { SubTaskListService } from 'src/services/sub-task-list-service/sub-task-list.service';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { TaskListService } from 'src/services/task-list-service/task-list.service';\r\nimport { Task } from '../task';\r\nimport { NgFor, NgIf } from '@angular/common';\r\nimport { AddTaskService } from 'src/services/add-task-service/add-task.service';\r\nimport { EditSubTaskService } from 'src/services/edit-sub-task-service/edit-sub-task.service';\r\n\r\n@Component({\r\n  selector: 'app-subtask',\r\n  templateUrl: './subtask.component.html',\r\n  styleUrls: ['./subtask.component.css']\r\n})\r\nexport class SubtaskComponent implements OnInit {\r\n  selectedAll: any;\r\n  subTaskid: string = '';\r\n\r\n  // isDrawerOpen: boolean = false;\r\n  // tempTaskName: string = '';\r\n  // tempPerson: string = '';\r\n  @Output() openDrawer = new EventEmitter<string>();\r\n\r\n  openSubTaskDrawer(tempTaskName: string, tempPerson: string){\r\n    this.openDrawer.emit();\r\n  }\r\n\r\n  @Input() parent_id: string = '';\r\n  colorlist: string[] = ['bg-green-400', 'bg-amber-400', 'bg-red-500', 'bg-gray-300'];\r\n  color: string = this.colorlist[2];\r\n  Status = new Map<string, string>([[\"bg-green-400\", \"Done\"], ['bg-amber-400', 'Working on it'], ['bg-red-500', 'Stuck'], ['bg-gray-300', 'None']]);\r\n\r\n  editColor(task: Task): void {\r\n    if (this.subTaskid === '') this.subTaskid = task.id;\r\n    else this.subTaskid = '';\r\n    console.log(this.subTaskid);\r\n  }\r\n  editColorSuccess(c: string, t: Task): void {\r\n    this.color = c;\r\n    t.status = c;\r\n    this.save(t);\r\n  }\r\n\r\n  save(task: Task) {\r\n    this.edit_sub_task_service.saveCell(task)\r\n  }\r\n\r\n  setdate(t: Task): void {\r\n    t.create_date = (<HTMLInputElement>document.getElementById(t.id+\"date\")).value;\r\n    this.save(t);\r\n  }\r\n\r\n    //check selected Person Column\r\n    personid: string = '';\r\n    personlist: string[] = ['Thành', 'Quân', 'Nguyên'];\r\n    person: string = '';\r\n  \r\n    addPerson(): void {\r\n      this.personlist.push(this.person);\r\n    }\r\n\r\n    editPerson(task: Task): void {\r\n      if (this.personid === '') this.personid = task.id;\r\n      else if (this.personid == 'add') this.personid = task.id;\r\n      else this.personid = '';\r\n    }\r\n  \r\n    clickInputAddPerson(task: Task): void {\r\n      this.personid = 'add';\r\n    }\r\n  \r\n    editPersonSuccess(p: string, t: Task): void {\r\n      t.create_by = p;\r\n      this.save(t);\r\n    }\r\n\r\n  selectAll() {\r\n    // this.selectedAll = this.subtask_list_service.task_list.every(function (item: any) {\r\n    //   return item.selected == true;\r\n    // })\r\n  }\r\n\r\n  ngOnInit(): void {\r\n      this.sub_task_list_service.getSubTaskList();\r\n      console.log(this.sub_task_list_service.sub_task_list);\r\n  }\r\n\r\n  drop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.sub_task_list_service.sub_task_list, event.previousIndex, event.currentIndex);\r\n  }\r\n\r\n  checkIfAllSelected() {\r\n    this.selectedAll = this.sub_task_list_service.sub_task_list.every(function (item: any) {\r\n      return item.selected == true;\r\n    })\r\n  }\r\n\r\n  constructor(public sub_task_list_service: SubTaskListService, public add_task_service: AddTaskService,\r\n              public edit_sub_task_service: EditSubTaskService) {};\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}