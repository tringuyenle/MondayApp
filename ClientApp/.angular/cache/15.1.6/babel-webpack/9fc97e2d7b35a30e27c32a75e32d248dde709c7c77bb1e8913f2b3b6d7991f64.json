{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../task-service/task.service\";\nimport * as i3 from \"../task-list-service/task-list.service\";\nexport class AddTaskService {\n  constructor(formBuilder, task_service, task_list_service) {\n    this.formBuilder = formBuilder;\n    this.task_service = task_service;\n    this.task_list_service = task_list_service;\n  }\n  ngOnInit() {\n    this.buildForm('');\n  }\n  buildForm(name) {\n    this.task_form = this.formBuilder.group({\n      id: '',\n      name: '',\n      person: '',\n      child_task: [],\n      create_by: '',\n      create_date: '',\n      status: ''\n    });\n    let temp = new Date();\n    const task = {\n      id: \"\",\n      name: \"\",\n      person: \"None\",\n      child_task: [],\n      create_by: \"None\",\n      create_date: temp.toLocaleDateString(\"zh-Hans-CN\"),\n      status: \"bg-gray-300\"\n    };\n    if (name) {\n      task.name = name;\n    }\n    this.displayTask(task);\n  }\n  displayTask(task) {\n    if (this.task_form) {\n      this.task_form.reset();\n    }\n    this.task = task;\n    this.task_form.patchValue({\n      id: this.task.id,\n      name: this.task.name,\n      person: this.task.person,\n      child_task: this.task.child_task,\n      create_by: this.task.create_by,\n      create_date: this.task.create_date,\n      status: this.task.status\n    });\n  }\n  saveTask() {\n    const t = {\n      ...this.task,\n      ...this.task_form.value\n    };\n    this.task_service.createTask(t).subscribe({\n      error: () => {\n        console.log(\"Thêm thành công\");\n        this.task_list_service.reloadTaskList();\n        this.onSaveComplete();\n      }\n    });\n  }\n  onSaveComplete() {\n    this.task_form.reset();\n    this.buildForm('');\n  }\n}\nAddTaskService.ɵfac = function AddTaskService_Factory(t) {\n  return new (t || AddTaskService)(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(i2.TaskService), i0.ɵɵinject(i3.TaskListService));\n};\nAddTaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AddTaskService,\n  factory: AddTaskService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAUA,OAAM,MAAOA,cAAc;EAIzBC,YAAoBC,WAAwB,EAAUC,YAAyB,EAAUC,iBAAkC;IAAvG,gBAAW,GAAXF,WAAW;IAAuB,iBAAY,GAAZC,YAAY;IAAuB,sBAAiB,GAAjBC,iBAAiB;EAAqB;EAE/HC,QAAQ;IACJ,IAAI,CAACC,SAAS,CAAC,EAAE,CAAC;EACtB;EAEAA,SAAS,CAACC,IAAmB;IAC3B,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACtCC,EAAE,EAAE,EAAE;MACNH,IAAI,EAAE,EAAE;MACRI,MAAM,EAAE,EAAE;MACVC,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,EAAE;MACbC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE;KACT,CAAC;IAEF,IAAIC,IAAI,GAAG,IAAIC,IAAI;IAEnB,MAAMC,IAAI,GAAS;MAACR,EAAE,EAAE,EAAE;MAAEH,IAAI,EAAE,EAAE;MAAGI,MAAM,EAAE,MAAM;MAAEC,UAAU,EAAE,EAAE;MAAEC,SAAS,EAAE,MAAM;MAAEC,WAAW,EAAEE,IAAI,CAACG,kBAAkB,CAAC,YAAY,CAAC;MAAGJ,MAAM,EAAE;IAAa,CAAC;IAErK,IAAIR,IAAI,EAAE;MACRW,IAAI,CAACX,IAAI,GAAGA,IAAI;;IAElB,IAAI,CAACa,WAAW,CAACF,IAAI,CAAC;EACxB;EAEAE,WAAW,CAACF,IAAU;IACpB,IAAI,IAAI,CAACV,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAACa,KAAK,EAAE;;IAGxB,IAAI,CAACH,IAAI,GAAGA,IAAI;IAEhB,IAAI,CAACV,SAAS,CAACc,UAAU,CAAC;MACxBZ,EAAE,EAAE,IAAI,CAACQ,IAAI,CAACR,EAAE;MAChBH,IAAI,EAAE,IAAI,CAACW,IAAI,CAACX,IAAI;MACpBI,MAAM,EAAE,IAAI,CAACO,IAAI,CAACP,MAAM;MACxBC,UAAU,EAAE,IAAI,CAACM,IAAI,CAACN,UAAU;MAChCC,SAAS,EAAE,IAAI,CAACK,IAAI,CAACL,SAAS;MAC9BC,WAAW,EAAE,IAAI,CAACI,IAAI,CAACJ,WAAW;MAClCC,MAAM,EAAE,IAAI,CAACG,IAAI,CAACH;KACnB,CAAC;EACJ;EAEAQ,QAAQ;IACN,MAAMC,CAAC,GAAS;MAAC,GAAG,IAAI,CAACN,IAAI;MAAE,GAAG,IAAI,CAACV,SAAS,CAACiB;IAAK,CAAC;IACvD,IAAI,CAACtB,YAAY,CAACuB,UAAU,CAACF,CAAC,CAAC,CAACG,SAAS,CAAC;MACxCC,KAAK,EAAE,MAAK;QACVC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;QAC9B,IAAI,CAAC1B,iBAAiB,CAAC2B,cAAc,EAAE;QACvC,IAAI,CAACC,cAAc,EAAE;MACvB;KACD,CAAC;EACJ;EAEAA,cAAc;IACZ,IAAI,CAACxB,SAAS,CAACa,KAAK,EAAE;IACtB,IAAI,CAACf,SAAS,CAAC,EAAE,CAAC;EACpB;;AA/DWN,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAiC,SAAdjC,cAAc;EAAAkC,YAFb;AAAM","names":["AddTaskService","constructor","formBuilder","task_service","task_list_service","ngOnInit","buildForm","name","task_form","group","id","person","child_task","create_by","create_date","status","temp","Date","task","toLocaleDateString","displayTask","reset","patchValue","saveTask","t","value","createTask","subscribe","error","console","log","reloadTaskList","onSaveComplete","factory","providedIn"],"sourceRoot":"","sources":["E:\\WorkSpace\\MondayApp\\ClientApp\\src\\services\\add-task-service\\add-task.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport { TaskListService } from '../task-list-service/task-list.service';\r\nimport { Task } from 'src/app/task';\r\nimport { FormBuilder, FormGroup, FormsModule, FormControlName, FormControl } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { TaskService } from '../task-service/task.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AddTaskService implements OnInit{\r\n  task_form!: FormGroup;\r\n  task!: Task;\r\n\r\n  constructor(private formBuilder: FormBuilder, private task_service: TaskService, private task_list_service: TaskListService) { }\r\n\r\n  ngOnInit(): void {\r\n      this.buildForm('');\r\n  }\r\n\r\n  buildForm(name: string | null) {\r\n    this.task_form = this.formBuilder.group({\r\n      id: '',\r\n      name: '',\r\n      person: '',\r\n      child_task: [],\r\n      create_by: '',\r\n      create_date: '',\r\n      status: '',\r\n    });\r\n\r\n    let temp = new Date;\r\n\r\n    const task: Task = {id: \"\", name: \"\" , person: \"None\", child_task: [], create_by: \"None\", create_date: temp.toLocaleDateString(\"zh-Hans-CN\") , status: \"bg-gray-300\"};\r\n\r\n    if (name) {\r\n      task.name = name;\r\n    }\r\n    this.displayTask(task);\r\n  }\r\n\r\n  displayTask(task: Task): void {\r\n    if (this.task_form) {\r\n      this.task_form.reset();\r\n    }\r\n\r\n    this.task = task;\r\n\r\n    this.task_form.patchValue({\r\n      id: this.task.id,\r\n      name: this.task.name,\r\n      person: this.task.person,\r\n      child_task: this.task.child_task,\r\n      create_by: this.task.create_by,\r\n      create_date: this.task.create_date,\r\n      status: this.task.status,\r\n    });\r\n  }\r\n\r\n  saveTask() {\r\n    const t: Task = {...this.task, ...this.task_form.value};\r\n    this.task_service.createTask(t).subscribe({\r\n      error: () => {\r\n        console.log(\"Thêm thành công\");\r\n        this.task_list_service.reloadTaskList();\r\n        this.onSaveComplete();\r\n      }\r\n    });\r\n  }\r\n\r\n  onSaveComplete(): void {\r\n    this.task_form.reset();\r\n    this.buildForm('');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}