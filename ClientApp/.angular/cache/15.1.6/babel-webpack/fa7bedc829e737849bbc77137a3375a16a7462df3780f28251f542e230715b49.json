{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class GroupTaskListService {\n  constructor() {\n    this.group_task_list = [];\n  }\n}\nGroupTaskListService.ɵfac = function GroupTaskListService_Factory(t) {\n  return new (t || GroupTaskListService)();\n};\nGroupTaskListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupTaskListService,\n  factory: GroupTaskListService.ɵfac,\n  providedIn: 'root'\n});\n{}\ngetGroupTaskList();\n{\n  this.group_task_service.getGroupTaskList().subscribe(data => {\n    this.group_task_list = data;\n  });\n}\nreloadList();\n{\n  this.getGroupTaskList();\n}\ndeleteGroupTask(group_task, Grouptask);\n{\n  if (confirm(`Are you sure to delete Group Task: ${group_task.name}`)) {\n    this.task_service.deleteTask(group_task.id, false).subscribe({\n      error: () => console.log(\"Delete all task!\")\n    });\n    this.group_task_service.deleteGroupTask(group_task.id).subscribe({\n      error: () => {\n        console.log(\"Delete group task\");\n        this.reloadList();\n      }\n    });\n  }\n}","map":{"version":3,"mappings":";AAQA,OAAM,MAAOA,oBAAoB;EAHjCC;IAKE,oBAAe,GAAgB,EAAE;;;AAFtBD,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAE,SAApBF,oBAAoB;EAAAG,YAFnB;AAAM;AAO2E;AAE7FC,gBAAgB,EAAE;AAAC;EACjB,IAAI,CAACC,kBAAkB,CAACD,gBAAgB,EAAE,CAACE,SAAS,CAACC,IAAI,IAAG;IAC1D,IAAI,CAACC,eAAe,GAAGD,IAAI;EAC7B,CAAC,CAAC;;AAGJE,UAAU,EAAE;AAAC;EACX,IAAI,CAACL,gBAAgB,EAAE;;AAGzBM,eAAe,CAACC,UAAU,EAAEC,SAAS,CAAC;AAAC;EACrC,IAAGC,OAAO,CAAC,sCAAsCF,UAAU,CAACG,IAAI,EAAE,CAAC,EAAE;IACnE,IAAI,CAACC,YAAY,CAACC,UAAU,CAACL,UAAU,CAACM,EAAE,EAAE,KAAK,CAAC,CAACX,SAAS,CAAC;MAC3DY,KAAK,EAAE,MAAMC,OAAO,CAACC,GAAG,CAAC,kBAAkB;KAC5C,CAAC;IAEF,IAAI,CAACf,kBAAkB,CAACK,eAAe,CAACC,UAAU,CAACM,EAAE,CAAC,CAACX,SAAS,CAAC;MAC/DY,KAAK,EAAE,MAAK;QACVC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChC,IAAI,CAACX,UAAU,EAAE;MACnB;KACD,CAAC","names":["GroupTaskListService","constructor","factory","providedIn","getGroupTaskList","group_task_service","subscribe","data","group_task_list","reloadList","deleteGroupTask","group_task","Grouptask","confirm","name","task_service","deleteTask","id","error","console","log"],"sourceRoot":"","sources":["E:\\.NetCoreApp\\MondayApp\\ClientApp\\src\\services\\group-task-list-service\\group-task-list.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Grouptask } from 'src/app/grouptask';\r\nimport { GroupTaskService } from '../group-task-service/group-task.service';\r\nimport { TaskService } from '../task-service/task.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupTaskListService {\r\n\r\n  group_task_list: Grouptask[] = [];\r\n  first_group: \r\n\r\n  constructor(private group_task_service: GroupTaskService, private task_service: TaskService) { }\r\n\r\n  getGroupTaskList() {\r\n    this.group_task_service.getGroupTaskList().subscribe(data => {\r\n      this.group_task_list = data;\r\n    });\r\n  }\r\n\r\n  reloadList() {\r\n    this.getGroupTaskList();\r\n  }\r\n\r\n  deleteGroupTask(group_task: Grouptask) {\r\n    if(confirm(`Are you sure to delete Group Task: ${group_task.name}`)) {\r\n      this.task_service.deleteTask(group_task.id, false).subscribe({\r\n        error: () => console.log(\"Delete all task!\")\r\n      });\r\n\r\n      this.group_task_service.deleteGroupTask(group_task.id).subscribe({\r\n        error: () => {\r\n          console.log(\"Delete group task\");\r\n          this.reloadList();\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}