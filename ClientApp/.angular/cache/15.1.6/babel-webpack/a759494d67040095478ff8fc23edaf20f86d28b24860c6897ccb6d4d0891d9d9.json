{"ast":null,"code":"import { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./header/header.component\";\nimport * as i2 from \"./boardcontent/boardcontent.component\";\nimport * as i3 from \"./boardinfo/boardinfo.component\";\nimport * as i4 from \"./sidebar/sidebar.component\";\nconst TREE_DATA = [{\n  name: 'Fruit',\n  children: [{\n    name: 'Apple'\n  }, {\n    name: 'Banana'\n  }, {\n    name: 'Fruit loops'\n  }]\n}, {\n  name: 'Vegetable',\n  children: [{\n    name: 'Green',\n    children: [{\n      name: 'Broccoli'\n    }, {\n      name: 'Brussels sprouts'\n    }]\n  }, {\n    name: 'Orange',\n    children: [{\n      name: 'Pumpkins'\n    }, {\n      name: 'Carrots'\n    }]\n  }]\n}];\nexport class AppComponent {\n  constructor() {\n    this.displayedColumns = ['name', 'level'];\n    this._transformer = (node, level) => {\n      return {\n        expandable: !!node.children && node.children.length > 0,\n        name: node.name,\n        level: level\n      };\n    };\n    this.treeControl = new FlatTreeControl(node => node.level, node => node.expandable);\n    this.treeFlattener = new MatTreeFlattener(this._transformer, node => node.level, node => node.expandable, node => node.children);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    this.hasChild = (_, node) => node.expandable;\n    this.dataSource.data = TREE_DATA;\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 8,\n  vars: 0,\n  consts: [[1, \"flex\", \"flex-col\", \"w-full\", \"bg-indigo-50\", \"h-screen\", \"sticky\", \"top-0\"], [1, \"sticky\", \"top-0\", \"bg-indigo-50\"], [1, \"w-full\", \"flex\", 2, \"height\", \"100vh\"], [1, \"bg-white\", \"w-1/4\", \"rounded-r-lg\", \"mr-3\"], [1, \"w-full\", \"bg-white\", \"rounded-l-lg\", 2, \"height\", \"100%\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"app-header\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"app-sidebar\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵelement(6, \"app-boardinfo\")(7, \"app-boardcontent\");\n      i0.ɵɵelementEnd()()();\n    }\n  },\n  dependencies: [i1.HeaderComponent, i2.BoardcontentComponent, i3.BoardinfoComponent, i4.SidebarComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,mBAAmB;AACnD,SAASC,qBAAqB,EAAEC,gBAAgB,QAAuB,wBAAwB;;;;;;AAc/F,MAAMC,SAAS,GAAe,CAC5B;EACEC,IAAI,EAAE,OAAO;EACbC,QAAQ,EAAE,CAAC;IAACD,IAAI,EAAE;EAAO,CAAC,EAAE;IAACA,IAAI,EAAE;EAAQ,CAAC,EAAE;IAACA,IAAI,EAAE;EAAa,CAAC;CACpE,EACD;EACEA,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE,CACR;IACED,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC;MAACD,IAAI,EAAE;IAAU,CAAC,EAAE;MAACA,IAAI,EAAE;IAAkB,CAAC;GAC1D,EACD;IACEA,IAAI,EAAE,QAAQ;IACdC,QAAQ,EAAE,CAAC;MAACD,IAAI,EAAE;IAAU,CAAC,EAAE;MAACA,IAAI,EAAE;IAAS,CAAC;GACjD;CAEJ,CACF;AAMD,OAAM,MAAOE,YAAY;EAWvBC;IAVA,qBAAgB,GAAa,CAAC,MAAM,EAAE,OAAO,CAAC;IAEtC,iBAAY,GAAG,CAACC,IAAc,EAAEC,KAAa,KAAI;MACvD,OAAO;QACLC,UAAU,EAAE,CAAC,CAACF,IAAI,CAACH,QAAQ,IAAIG,IAAI,CAACH,QAAQ,CAACM,MAAM,GAAG,CAAC;QACvDP,IAAI,EAAEI,IAAI,CAACJ,IAAI;QACfK,KAAK,EAAEA;OACR;IACH,CAAC;IAMD,gBAAW,GAAG,IAAIT,eAAe,CAC/BQ,IAAI,IAAEA,IAAI,CAACC,KAAK,EAChBD,IAAI,IAAEA,IAAI,CAACE,UAAU,CACtB;IAED,kBAAa,GAAG,IAAIR,gBAAgB,CAClC,IAAI,CAACU,YAAY,EACjBJ,IAAI,IAAEA,IAAI,CAACC,KAAK,EAChBD,IAAI,IAAEA,IAAI,CAACE,UAAU,EACrBF,IAAI,IAAEA,IAAI,CAACH,QAAQ,CACpB;IAED,eAAU,GAAE,IAAIJ,qBAAqB,CACnC,IAAI,CAACY,WAAW,EAAE,IAAI,CAACC,aAAa,CACrC;IAED,aAAQ,GAAG,CAACC,CAAS,EACnBP,IAAqB,KAAKA,IAAI,CAACE,UAAU;IApBzC,IAAI,CAACM,UAAU,CAACC,IAAI,GAAGd,SAAS;EAClC;;AAbWG,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAY;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCxCzBC,8BAAqE;MACnEA,gCAA2D;MAC3DA,8BAAgD;MAE5CA,8BAA2B;MAC7BA,iBAAM;MACNA,8BAAgE;MAC9DA,gCAA+B;MAEjCA,iBAAM","names":["FlatTreeControl","MatTreeFlatDataSource","MatTreeFlattener","TREE_DATA","name","children","AppComponent","constructor","node","level","expandable","length","_transformer","treeControl","treeFlattener","_","dataSource","data","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["E:\\WorkSpace\\MondayApp\\ClientApp\\src\\app\\app.component.ts","E:\\WorkSpace\\MondayApp\\ClientApp\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from '@angular/material/tree';\r\nimport { MatTableModule } from '@angular/material/table';\r\n\r\ninterface FoodNode {\r\n  name: string;\r\n  children?: FoodNode[];\r\n}\r\n\r\ninterface ExampleFlatNode{\r\n  expandable: boolean;\r\n  name: string;\r\n  level: number;\r\n}\r\n\r\nconst TREE_DATA: FoodNode[] = [\r\n  {\r\n    name: 'Fruit',\r\n    children: [{name: 'Apple'}, {name: 'Banana'}, {name: 'Fruit loops'}]\r\n  },\r\n  {\r\n    name: 'Vegetable',\r\n    children: [\r\n      {\r\n        name: 'Green',\r\n        children: [{name: 'Broccoli'}, {name: 'Brussels sprouts'}],\r\n      },\r\n      {\r\n        name: 'Orange',\r\n        children: [{name: 'Pumpkins'}, {name: 'Carrots'}],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n  displayedColumns: string[] = ['name', 'level'];\r\n\r\n  private _transformer = (node: FoodNode, level: number) => {\r\n    return {\r\n      expandable: !!node.children && node.children.length > 0,\r\n      name: node.name,\r\n      level: level,\r\n    };\r\n  };\r\n\r\n  constructor(){\r\n    this.dataSource.data = TREE_DATA;\r\n  }\r\n\r\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\r\n    node=>node.level,\r\n    node=>node.expandable\r\n  );\r\n\r\n  treeFlattener = new MatTreeFlattener(\r\n    this._transformer,\r\n    node=>node.level,\r\n    node=>node.expandable,\r\n    node=>node.children\r\n  );\r\n\r\n  dataSource= new MatTreeFlatDataSource(\r\n    this.treeControl, this.treeFlattener \r\n  );\r\n\r\n  hasChild = (_: number, \r\n    node: ExampleFlatNode) => node.expandable;\r\n}\r\n","<div class=\"flex flex-col w-full bg-indigo-50 h-screen sticky top-0\">\r\n  <app-header class=\"sticky top-0 bg-indigo-50\"></app-header>\r\n  <div class=\"w-full flex\" style=\"height: 100vh;\">\r\n    <div class=\"bg-white w-1/4 rounded-r-lg mr-3\">\r\n      <app-sidebar></app-sidebar>\r\n    </div>\r\n    <div class=\"w-full bg-white rounded-l-lg\" style=\"height: 100%;\">\r\n      <app-boardinfo></app-boardinfo>\r\n      <app-boardcontent></app-boardcontent>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- <mat-tree [treeControl]=\"treeControl\" [dataSource]=\"dataSource\">\r\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n    <button mat-icon-button disabled></button>\r\n    {{node.name}}\r\n  </mat-tree-node>\r\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n    <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.name\">\r\n      <mat-icon class=\"mat-icon-rtl-mirror\">\r\n        {{treeControl.isExpanded(node) ?\r\n        'expand_more' : 'chevron_right'}}\r\n      </mat-icon>\r\n    </button>\r\n    {{node.name}}\r\n  </mat-tree-node>\r\n</mat-tree> -->\r\n\r\n<!-- <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"name\">\r\n    <th style=\"background-color: aquamarine;\" mat-header-cell *matHeaderCellDef> \r\n      <span [style.paddingLeft.px]=\"40\"> Name </span>\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let data\"> \r\n      <button mat-icon-button \r\n              [style.visibility]=\"!data.expandable ? 'hidden' : ''\"\r\n              [style.marginLeft.px]=\"data.level * 32\"\r\n              (click)=\"treeControl.toggle(data)\">\r\n        <mat-icon class=\"mat-icon-rtl-mirror\">\r\n          {{treeControl.isExpanded(data) ? 'expand_more' : 'chevron_right'}}\r\n        </mat-icon>\r\n      </button>\r\n      {{data.name}}\r\n    </td>\r\n  </ng-container> \r\n\r\n  <ng-container  matColumnDef=\"level\">\r\n    <th style=\"background-color: aquamarine;\" mat-header-cell *matHeaderCellDef> Level </th>\r\n    <td mat-cell *matCellDef=\"let data\"> {{data.level}} </td>\r\n  </ng-container> \r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table> -->\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}